package com.chengxin.fragment;import java.lang.reflect.Field;import java.util.ArrayList;import java.util.List;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;import android.annotation.SuppressLint;import android.content.Context;import android.os.Bundle;import android.os.Handler;import android.os.Parcelable;import android.support.v4.app.Fragment;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.ImageView.ScaleType;import android.widget.LinearLayout;import android.widget.TextView;import com.chengxin.R;import com.chengxin.Entity.AdDomain;import com.chengxin.global.FeatureFunction;import com.chengxin.global.ImageLoader;@SuppressLint({ "HandlerLeak", "NewApi" })public class AdViewFragment extends Fragment {	public static String IMAGE_CACHE_PATH = "imageloader/Cache"; // 图片缓存路径	private Context mContext;	private View view;	private ViewPager 		adViewPager;	private List<ImageView> imageViews;	private List<View> 		dotList;	private List<AdDomain> 	adList;	private TextView tv_pre;	private TextView tv_date;	private TextView tv_title;	private TextView tv_topic_from;	private TextView tv_topic;	private LinearLayout dotLayout;	private int currentItem = 0;	private long mDelay = 3;	long mDuration = mDelay;	// 自动播放调度服务	private ScheduledExecutorService scheduledExecutorService;	// 异步的图片加载器	private ImageLoader mImageLoader;	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);		mImageLoader = new ImageLoader();	}	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = AdViewFragment.this.getActivity();	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		view = inflater.inflate(R.layout.ad_view_fragment, container, false);		return view;	}	@Override	public void onResume() {		super.onResume();		startAd();	}	@Override	public void onStop() {		super.onStop();		// 当Activity不可见的时候停止切换		scheduledExecutorService.shutdown();	}	private Handler handler = new Handler() {		public void handleMessage(android.os.Message msg) {			adViewPager.setCurrentItem(currentItem);		};	};	private void initAdData() {		imageViews = new ArrayList<ImageView>();		dotList = new ArrayList<View>();				tv_pre = (TextView) view.findViewById(R.id.tv_pre);		tv_date = (TextView) view.findViewById(R.id.tv_date);		tv_pre = (TextView) view.findViewById(R.id.tv_pre);		tv_title = (TextView) view.findViewById(R.id.tv_title);		tv_topic_from = (TextView) view.findViewById(R.id.tv_topic_from);		tv_topic = (TextView) view.findViewById(R.id.tv_topic);		adViewPager = (ViewPager) view.findViewById(R.id.vp);		adViewPager.setAdapter(new MyAdapter());// 设置填充ViewPager页面的适配器		// 设置一个监听器，当ViewPager中的页面改变时调用		adViewPager.setOnPageChangeListener(new MyPageChangeListener());		dotLayout = (LinearLayout) view.findViewById(R.id.dot_layout);		addDynamicView();	}	private void addDynamicView() {		// 动态添加图片和下面指示的圆点		// 初始化图片资源		for (int i = 0; i < adList.size(); i++) {			// 异步加载图片			try {				AdDomain adItem = adList.get(i);								if (adItem != null) {					ImageView imageView = new ImageView(mContext);					if (adItem.isUrl) {						String url = adItem.imgUrl;						if (url != null && url.length() > 4) {							mImageLoader.getBitmap(mContext, imageView, null, url, 0, false, false, false);							imageView.setScaleType(ScaleType.FIT_XY);							imageViews.add(imageView);						}					} else {						String name = adItem.imgUrl;						Field field = R.drawable.class.getDeclaredField(name);						int resId = field.getInt(null);												if (resId > 0) {							imageView.setImageResource(resId);							imageView.setScaleType(ScaleType.FIT_XY);							imageViews.add(imageView);						}					}										View dot = new View(mContext, null, R.style.DotStyle);										if (i == 0) {						dot.setBackgroundResource(R.drawable.dot_focused);					} else {						dot.setBackgroundResource(R.drawable.dot_normal);					}										int r = FeatureFunction.dip2px(mContext, 7);					int margin = FeatureFunction.dip2px(mContext, 2);										dot.setLayoutParams(new ViewGroup.LayoutParams(r, r));										LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(dot.getLayoutParams());  					lp.setMargins(margin, 0, margin, 0);  					dot.setLayoutParams(lp);										dotList.add(dot);					dotLayout.addView(dot);				}			} catch (Exception e) {				e.printStackTrace();			}		}	}		private class MyPageChangeListener implements OnPageChangeListener {		private int oldPosition = 0;		@Override		public void onPageScrollStateChanged(int arg0) {		}		@Override		public void onPageScrolled(int arg0, float arg1, int arg2) {		}		@Override		public void onPageSelected(int position) {			currentItem = position;			AdDomain adDomain = adList.get(position);			tv_pre.setText(adDomain.prefix);			tv_title.setText(adDomain.title); // 设置标题			tv_date.setText(adDomain.date);			tv_topic_from.setText(adDomain.topicFrom);			tv_topic.setText(adDomain.topic);			dotList.get(oldPosition).setBackgroundResource(R.drawable.dot_normal);			dotList.get(position).setBackgroundResource(R.drawable.dot_focused);			oldPosition = position;		}	}	private class MyAdapter extends PagerAdapter {		@Override		public int getCount() {			return adList.size();		}		@Override		public Object instantiateItem(final ViewGroup container, int position) {			if (imageViews != null && imageViews.size() > 0) {				ImageView iv = imageViews.get(position);				((ViewPager) container).addView(iv);				// 在这个方法里面设置图片的点击事件				iv.setOnClickListener(new OnClickListener() {					@Override					public void onClick(View v) {						// 处理跳转逻辑						container.callOnClick();					}				});				return iv;			}						return null;		}		@Override		public void destroyItem(View arg0, int arg1, Object arg2) {			((ViewPager) arg0).removeView((View) arg2);		}		@Override		public boolean isViewFromObject(View arg0, Object arg1) {			return arg0 == arg1;		}		@Override		public void restoreState(Parcelable arg0, ClassLoader arg1) {		}		@Override		public Parcelable saveState() {			return null;		}		@Override		public void startUpdate(View arg0) {		}		@Override		public void finishUpdate(View arg0) {		}	}	private void startAd() {		scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();		// 当Activity显示出来后，每两秒切换一次图片显示				scheduledExecutorService.scheduleAtFixedRate(new ScrollTask(), mDelay, mDuration,				TimeUnit.SECONDS);	}	private class ScrollTask implements Runnable {		@Override		public void run() {			synchronized (adViewPager) {				currentItem = (currentItem + 1) % imageViews.size();				handler.obtainMessage().sendToTarget();			}		}	}	public void setAdList(List< AdDomain > list) {		if (list != null && list.size() > 0) {			if (adList == null) {				adList = new ArrayList<AdDomain>();			} else {				adList.clear();			}						adList.addAll(list);		}				if (adList != null && adList.size() > 0) {			mDuration = mDelay * adList.size();			initAdData();		}	}}