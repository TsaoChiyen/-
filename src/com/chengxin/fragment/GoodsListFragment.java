package com.chengxin.fragment;import java.util.ArrayList;import java.util.List;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v4.app.Fragment;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.GridView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.chengxin.GoodsDetailActivity;import com.chengxin.R;import com.chengxin.Entity.Goods;import com.chengxin.Entity.GoodsEntity;import com.chengxin.Entity.LoginResult;import com.chengxin.Entity.MarketsCategory;import com.chengxin.Entity.Merchant;import com.chengxin.Entity.MerchantMenu;import com.chengxin.Entity.PopItem;import com.chengxin.Entity.ShopAreaList;import com.chengxin.Entity.WeiYuanState;import com.chengxin.adapter.GridGoodsAdapter;import com.chengxin.dialog.SearchGoodsDialog;import com.chengxin.dialog.SearchGoodsDialog.OnSearchGoodsClickListener;import com.chengxin.global.GlobalParam;import com.chengxin.global.WeiYuanCommon;import com.chengxin.net.WeiYuanException;import com.chengxin.widget.PopWindows;import com.chengxin.widget.PopWindows.PopWindowsInterface;public class GoodsListFragment extends Fragment implements OnClickListener, OnItemClickListener, OnSearchGoodsClickListener {	private static final int MSG_GOODS_LIST = 0x8601;	private static final int MSG_AREA_LIST = 0x8602;	private static final int MSG_CATEGORY_LIST = 0x8603;	private static final int MSG_SELECT_SHOP = 0x8604;	private static final int MSG_SELECT_USER = 0x8605;	private View mView;	private Context mContext;	private TextView mButtonCategory;	private TextView mButtonSort;	private TextView mButtonArea;	private GridView mGrid;		private List<Goods> mList = new ArrayList<Goods>();		private GridGoodsAdapter mAdapter;	protected GoodsEntity mGoodsEntity;	protected int mCategoryid = 0;	protected String mCity = null;	protected int mSort = 0;	private List<PopItem> mCategoryMenuList;	private PopWindows mPopWindows;	private LinearLayout mToolBarLayout;	private List<PopItem> mAreaMenuList;	private PopWindows mAreaPopWindows;	private List<PopItem> mSortMenuList;	private PopWindows mSortPopWindows;	private Goods mSelectedGoods;	private Merchant mSelectedShop;	private LoginResult mSelectedUser;	private int mShopType = 0;	@Override	public void onActivityCreated(Bundle savedInstanceState) {		super.onActivityCreated(savedInstanceState);				mToolBarLayout = (LinearLayout)mView.findViewById(R.id.tool_bar_layout);				mButtonCategory = (TextView)mView.findViewById(R.id.btn_category);		mButtonArea = (TextView)mView.findViewById(R.id.btn_area);		mButtonSort = (TextView)mView.findViewById(R.id.btn_sort);				mButtonCategory.setOnClickListener(this);		mButtonArea.setOnClickListener(this);		mButtonSort.setOnClickListener(this);				mGrid = (GridView)mView.findViewById(R.id.grid_goods);		mGrid.setOnItemClickListener(this);		getShopCategory();		getShopArea();		initSortPopMenu();		getData();	}	private void initSortPopMenu() {        mSortMenuList = (List<PopItem>) new ArrayList<PopItem>();        mSortMenuList.add(new PopItem(1, "价格从低到高"));        mSortMenuList.add(new PopItem(2, "价格从高到低"));                mSortPopWindows = new PopWindows(mContext, mSortMenuList, mToolBarLayout, new PopWindowsInterface() {			@Override			public void onItemClick(int dataId, int position, View view) {				mSort = dataId;				mButtonSort.setText(mSortMenuList.get(position).option);				getData();			}        });	}	private void getShopCategory() {		if (mShopType == 0) {			if (MerchantMenu.hasData()) {				mHandler.sendEmptyMessage(MSG_CATEGORY_LIST);				return;			}		} else {			if (MarketsCategory.hasData()) {				mHandler.sendEmptyMessage(MSG_CATEGORY_LIST);				return;			}		}		if(!WeiYuanCommon.getNetWorkState()){			mHandler.sendEmptyMessage(GlobalParam.MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					if (mShopType == 0) {						MerchantMenu temp = WeiYuanCommon.getWeiYuanInfo().getShopType(mShopType);						WeiYuanCommon.sendMsg(mHandler, MSG_CATEGORY_LIST, temp);					} else {						MarketsCategory temp = WeiYuanCommon.getWeiYuanInfo().getMarketsCategory();						WeiYuanCommon.sendMsg(mHandler, MSG_CATEGORY_LIST, temp);					}				} catch (WeiYuanException e) {					e.printStackTrace();				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();	}	private void getShopArea() {		if (ShopAreaList.hasData()) {			mHandler.sendEmptyMessage(MSG_AREA_LIST);			return;		}		if(!WeiYuanCommon.getNetWorkState()){			mHandler.sendEmptyMessage(GlobalParam.MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					ShopAreaList temp = WeiYuanCommon.getWeiYuanInfo().getShopAreaList(mShopType);					WeiYuanCommon.sendMsg(mHandler, MSG_AREA_LIST, temp);				} catch (WeiYuanException e) {					e.printStackTrace();				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();	}	private void initCategoryPopMenu() {		if (mShopType == 0) {	        mCategoryMenuList = (List<PopItem>) MerchantMenu.getPopMenuList();		} else {	        mCategoryMenuList = (List<PopItem>) MarketsCategory.getPopMenuList();		}        mPopWindows = new PopWindows(mContext, mCategoryMenuList, mToolBarLayout, new PopWindowsInterface() {			@Override			public void onItemClick(int dataId, int position, View view) {				mCategoryid = dataId;				mButtonCategory.setText(mCategoryMenuList.get(position).option);				getData();			}        });	}	private void initAreaPopMenu() {        if (ShopAreaList.hasData()) {            mAreaMenuList = (List<PopItem>) ShopAreaList.getPopMenuList();            mAreaPopWindows = new PopWindows(mContext, mAreaMenuList, mToolBarLayout, new PopWindowsInterface() {    			@Override    			public void onItemClick(int dataId, int position, View view) {    				if (position == 0 ) {        				mCity = null;    				} else {        				mCity = mAreaMenuList.get(position).option;    				}    				mButtonArea.setText(mAreaMenuList.get(position).option);    				getData();    			}            });        }	}	@Override	public void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = GoodsListFragment.this.getActivity();	}	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		mView= inflater.inflate(R.layout.goods_list_fragment, container, false);		return mView;		}	@Override	public void onClick(View v) {		switch (v.getId()) {		case R.id.btn_category:			mPopWindows.showGroupPopView(mCategoryMenuList,					Gravity.LEFT,					R.drawable.no_top_arrow_bg,					R.color.white,					0);			break;		case R.id.btn_area:			mAreaPopWindows.showGroupPopView(mAreaMenuList,					Gravity.CENTER,					R.drawable.no_top_arrow_bg,					R.color.white,					0);			break;		case R.id.btn_sort:			mSortPopWindows.showGroupPopView(mSortMenuList,					Gravity.RIGHT,					R.drawable.no_top_arrow_bg,					R.color.white,					0);			break;		default:			break;		}	}	private void getData() {		if(!WeiYuanCommon.getNetWorkState()){			mHandler.sendEmptyMessage(GlobalParam.MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					int page = 0;										if(mGoodsEntity != null && mGoodsEntity.pageInfo != null							&& mGoodsEntity.pageInfo.hasMore == 1){						page = mGoodsEntity.pageInfo.currentPage + 1;					}else{						page = 1;					}										mGoodsEntity =	WeiYuanCommon.getWeiYuanInfo().getGoodsList(							mShopType,							page,							0,							mCategoryid,							mCity,							mSort);					List<Goods> tempList = new ArrayList<Goods>();										if(mGoodsEntity.goodsList != null && mGoodsEntity.goodsList.size() > 0){						tempList.addAll(mGoodsEntity.goodsList);					}										WeiYuanCommon.sendMsg(mHandler, MSG_GOODS_LIST, tempList);				} catch (WeiYuanException e) {					e.printStackTrace();				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();	}		private void showData() {		if (mAdapter == null) {			mAdapter = new GridGoodsAdapter(mContext, mList);			mGrid.setAdapter(mAdapter);		} else {			mAdapter.notifyDataSetChanged();		}	}	private Handler mHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);			switch (msg.what) {			case MSG_SELECT_USER:				mSelectedUser = (LoginResult)msg.obj;				if (mSelectedUser != null) {					WeiYuanState state = mSelectedUser.mState;										if (state == null) {						Toast.makeText(mContext, "联系人不存在或已被删除", Toast.LENGTH_LONG).show();						return;					}										if (state.code == 0) {						if (mSelectedShop != null) {							mSelectedShop.user = mSelectedUser.mLogin;							showGoodsDetail(mSelectedGoods, mSelectedShop);						}					}				}				break;			case MSG_SELECT_SHOP:				mSelectedShop = (Merchant)msg.obj;								if (mSelectedShop != null) {					WeiYuanState state = mSelectedShop.state;										if (state == null) {						Toast.makeText(mContext, "商家不存在或已被删除", Toast.LENGTH_LONG).show();						return;					}										if (state.code == 0) {						if (mSelectedShop.uid != null && mSelectedShop.uid.length() > 0 && !mSelectedShop.uid.equals("null")) {							getUserInfo(mSelectedShop.uid);						}					}				}				break;			case MSG_CATEGORY_LIST:				if (mShopType == 0) {					if (MerchantMenu.hasData()) {						initCategoryPopMenu();					}				} else {					if (MarketsCategory.hasData()) {						initCategoryPopMenu();					}				}				break;			case MSG_AREA_LIST:				if (ShopAreaList.hasData()) {					initAreaPopMenu();				}				break;			case MSG_GOODS_LIST:				List<Goods> list = (List<Goods>)msg.obj;								if(list == null){					Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();					return;				}								if(mGoodsEntity.state.code == 0){					mList.clear();										if(list.size()  > 0){						mList.addAll(list);					}					showData();				} else {					Toast.makeText(mContext, mGoodsEntity.state.errorMsg,Toast.LENGTH_LONG).show();				}				break;                            case GlobalParam.MSG_NETWORK_ERROR:				Toast.makeText(mContext,R.string.network_error,Toast.LENGTH_LONG).show();				return;							case GlobalParam.MSG_TICE_OUT_EXCEPTION:				String message=(String)msg.obj;				if (message==null || message.equals("")) {					message=mContext.getString(R.string.timeout);				}				Toast.makeText(mContext,message, Toast.LENGTH_LONG).show();				break;			default:				break;			}		}	};	@Override	public void onItemClick(AdapterView<?> gridView, View convertView, int position, long id) {		// 商品详情页面		// 先获取商家信息		mSelectedGoods = mList.get(position);				if (mSelectedGoods != null) {			getShopInfo(mSelectedGoods.shopid);		}	}	private void getShopInfo(final int shopid) {		if(!WeiYuanCommon.getNetWorkState()){			mHandler.sendEmptyMessage(GlobalParam.MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					Merchant temp = WeiYuanCommon.getWeiYuanInfo().getShop(mShopType, shopid);					WeiYuanCommon.sendMsg(mHandler, MSG_SELECT_SHOP, temp);				} catch (WeiYuanException e) {					e.printStackTrace();				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();	}		private void getUserInfo(final String uid) {		if(!WeiYuanCommon.getNetWorkState()){			mHandler.sendEmptyMessage(GlobalParam.MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					LoginResult temp = WeiYuanCommon.getWeiYuanInfo().getUserInfo(uid);					WeiYuanCommon.sendMsg(mHandler, MSG_SELECT_USER, temp);				} catch (WeiYuanException e) {					e.printStackTrace();				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();	}		private void showGoodsDetail(Goods goods, Merchant shop) {		Intent detailIntent = new Intent();		detailIntent.setClass(mContext, GoodsDetailActivity.class);		detailIntent.putExtra("entity", goods);		detailIntent.putExtra("shopid", shop.id);		detailIntent.putExtra("addr", shop.address);		detailIntent.putExtra("tel_phone",shop.phone);		detailIntent.putExtra("shop_name",shop.name);		detailIntent.putExtra("user", shop.user);		detailIntent.putExtra("shop_type", mShopType);		startActivity(detailIntent);	}	public void startSearch() {		SearchGoodsDialog dialog = new SearchGoodsDialog(mContext, mList);		dialog.setOnSearchGoodsClickListener(this);		dialog.show();			}	@Override	public void onSearchGoodsClickListener(int sourcePosition) {		mSelectedGoods = mList.get(sourcePosition);				if (mSelectedGoods != null) {			getShopInfo(mSelectedGoods.shopid);		}	}	public void setShopType(int shopType) {		mShopType = shopType;		getShopCategory();		getShopArea();	}}