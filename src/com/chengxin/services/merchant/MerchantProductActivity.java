package com.chengxin.services.merchant;import java.io.File;import java.io.Serializable;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.provider.MediaStore;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.Button;import android.widget.ImageView;import android.widget.Toast;import android.widget.AdapterView.OnItemClickListener;import android.widget.EditText;import com.chengxin.BaseActivity;import com.chengxin.LocationActivity;import com.chengxin.R;import com.chengxin.RotateImageActivity;import com.chengxin.ShowImageActivity;import com.chengxin.Entity.MapInfo;import com.chengxin.Entity.MerchantGoods;import com.chengxin.Entity.MerchantInfo;import com.chengxin.Entity.Picture;import com.chengxin.Entity.UploadImg;import com.chengxin.Entity.WeiYuanState;import com.chengxin.adapter.UploadPicAdapter;import com.chengxin.adapter.UploadPicAdapter.ViewHolder;import com.chengxin.dialog.MMAlert;import com.chengxin.dialog.MMAlert.OnAlertSelectId;import com.chengxin.global.FeatureFunction;import com.chengxin.global.GlobalParam;import com.chengxin.global.GlobleType;import com.chengxin.global.ScreenUtils;import com.chengxin.global.WeiYuanCommon;import com.chengxin.net.WeiYuanException;import com.chengxin.widget.MyGridView;public class MerchantProductActivity extends BaseActivity implements OnItemClickListener {	protected static final int MSG_PRODUCT_ADD = 0x7001;	protected static final int MSG_PRODUCT_EDIT = 0x7002;		private MerchantGoods goods;	private EditText mEditName;	private EditText mEditPrice;	private MyGridView mMyGridView;;		private List<UploadImg> mImageList = new ArrayList<UploadImg>();	private UploadPicAdapter mAdapter;	private int mWidth = 0;	private Button mBtnSubmit;	private List<Picture> picList;	private MerchantInfo merchant;	private boolean isFirstShow = true;		protected Handler mHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);						WeiYuanState state = null;			MerchantGoods product = null;						switch (msg.what) {			case MSG_PRODUCT_ADD:			case MSG_PRODUCT_EDIT:				product = (MerchantGoods)msg.obj;								if (product != null) {					state = product.state;					if(state == null){						Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();						return;					}										if (state.errorMsg != null && state.errorMsg.length() > 0)						Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();					if(state.code == 0) {						Intent intent = new Intent();						setResult(RESULT_OK, intent);						intent.putExtra("data", product);						MerchantProductActivity.this.finish();					}				}				break;			}		}	};	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = this;		setContentView(R.layout.merchant_product_activity);		mWidth = ScreenUtils.getScreenWidth(mContext); 		if (getIntent().hasExtra("merchant")) {			merchant = (MerchantInfo)getIntent().getExtras().get("merchant");		}		if (getIntent().hasExtra("data")) {			goods = (MerchantGoods)getIntent().getExtras().get("data");		}				if (goods == null) {			goods = new MerchantGoods();			goods.shopid = merchant.id;		}		goods.type = String.valueOf(merchant.type);				initComponent();		getData();	}	private void initComponent() {		String title = "农家乐产品管理";				if (merchant.type == 2) {			title = "住宿服务产品管理";		} else if (merchant.type == 3) {			title = "休闲娱乐产品管理";		} else if (merchant.type == 4) {			title = "餐饮服务产品管理";		}		setTitleContent(R.drawable.back_btn, 0, title);		mLeftBtn.setOnClickListener(this);		mEditName = (EditText)findViewById(R.id.edit_name);		mEditPrice = (EditText)findViewById(R.id.edit_price);				mMyGridView  = (MyGridView)findViewById(R.id.gridview);		mMyGridView.setOnItemClickListener(this);		mImageList.add(new UploadImg("", 1));		mAdapter = new UploadPicAdapter(mContext, mImageList, mWidth);		mMyGridView.setAdapter(mAdapter);		mBtnSubmit = (Button)findViewById(R.id.btn_submit);		mBtnSubmit.setOnClickListener(this);		if (goods == null || goods.id == 0) {			mBtnSubmit.setText("添加");		}	}	private void getData() {		if (goods !=null && goods.id > 0) {			if (goods.name != null && !goods.name.equals("") && !goods.name.equals("null")) {				mEditName.setText(goods.name);			}						mEditPrice.setText(String.format("%.2f", goods.price));			picList = goods.attachment;						if (picList != null && picList.size() > 0) {				for (int i = 0; i < picList.size(); i++) {					mImageList.add(mImageList.size() - 1, new UploadImg(picList.get(i).smallUrl, 2));				}			}		}	}	@Override	public void onClick(View v) {		super.onClick(v);				switch (v.getId()) {		case R.id.left_btn:			this.finish();			break;		case R.id.btn_submit:			submit();			break;		}	}	private void submit() {		if (!checkValue()) {			return;		}				if (goods == null) {			return;		}				if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}				new Thread(){			public void run() {				try {					WeiYuanCommon.sendMsg(mBaseHandler, BASE_SHOW_PROGRESS_DIALOG, 							mContext.getResources().getString(R.string.commit_dataing));					if (goods.id == 0) {						MerchantGoods temp = WeiYuanCommon.getWeiYuanInfo().addMerchantGoods(goods);						mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);						WeiYuanCommon.sendMsg(mHandler, MSG_PRODUCT_ADD, temp);					} else {						MerchantGoods temp = WeiYuanCommon.getWeiYuanInfo().editMerchantGoods(goods);						mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);						WeiYuanCommon.sendMsg(mHandler, MSG_PRODUCT_EDIT, temp);					}				} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();					mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);				}			};		}.start();	}	private boolean checkValue() {		goods.name = mEditName.getText().toString();		String price = mEditPrice.getText().toString();		String hint = null;				if (goods.name == null || goods.name.equals("")) {			hint = "请输入名称";		} else if (price == null || price.equals("")) {			hint = "请输入价格";		} else {			goods.price = Double.valueOf(price);						if (mImageList!=null && mImageList.size()>0 ) {				List<Picture> list = new ArrayList<Picture>();				int i = 0;								for (UploadImg img : mImageList) {					if (img.mType == 0) {						Picture pic = new Picture(null, img.mPicPath);						pic.key = "picture" + (i + 1);						pic.newPic = true;						list.add(pic);					}					i ++;				}								goods.setPictureList(list);			}		}				if (hint != null && hint.length() > 0) {			Toast.makeText(mContext, hint, Toast.LENGTH_LONG).show();			return false;		}				return true;	}	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);				switch (requestCode) {		case GlobalParam.REQUEST_GET_URI:			if (resultCode == RESULT_OK) {				doChoose(true, data);			}			break;		case GlobalParam.REQUEST_GET_IMAGE_BY_CAMERA:			if (resultCode == RESULT_OK) {				doChoose(false, data);			}			break;		case GlobalParam.REQUEST_GET_BITMAP:			if (resultCode == RESULT_OK) {				String path = data.getStringExtra("path");				if (!TextUtils.isEmpty(path)) {					// 一张图片不能选择多次					boolean isExist = false;					if (mImageList.size() != 0) {						for (int i = 0; i < mImageList.size(); i++) {							if (mImageList.get(i).mType == 0									&& mImageList.get(i).mPicPath											.equals(path)) {								isExist = true;								break;							}						}					}					if (!isExist) {						mImageList.add(mImageList.size() - 1,								new UploadImg(path, 0));						if (mImageList.size() - 1 == 5) {							mImageList.remove(mImageList.size() - 1);						}						mAdapter.notifyDataSetChanged();					}				}			}			break;		case 1:			if(data!= null && resultCode == 2){				List<UploadImg> imgList = (List<UploadImg>) data.getSerializableExtra("img_list");								if(imgList!=null && imgList.size()>0){					if(mImageList!=null && mImageList.size()>0){						mImageList.clear();					}					mImageList.addAll(imgList);					mAdapter.notifyDataSetChanged();				}			}			break;		}			}	private void doChoose(final boolean isGallery, final Intent data) {		if(isGallery){			originalImage(data);		}else {			if(data != null){				originalImage(data);			}else{				// Here if we give the uri, we need to read it				String tempUrl = WeiYuanCommon.getCamerUrl(mContext);				String path = Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY+tempUrl;				Log.e("path", "path:"+ path);				if(tempUrl == null || tempUrl.equals("")){					Toast.makeText(mContext, "图片不存在!", Toast.LENGTH_LONG).show();					return;				}				Log.e("start-end", path.indexOf(".")+":"+path.length());				String extension = path.substring(path.indexOf("."), path.length());				if(FeatureFunction.isPic(extension)){					//startPhotoZoom(Uri.fromFile(new File(path)));					Intent intent = new Intent(mContext, RotateImageActivity.class);					intent.putExtra("path", path);					intent.putExtra("type", 0);					startActivityForResult(intent, GlobalParam.REQUEST_GET_BITMAP);				}				//mImageFilePath = FeatureFunction.PUB_TEMP_DIRECTORY+TEMP_FILE_NAME;				//ShowBitmap(false);			}		}	}	private void originalImage(Intent data) {		Uri uri = data.getData();		//Log.d("may", "uri=" + uri + ", authority=" + uri.getAuthority());		if (!TextUtils.isEmpty(uri.getAuthority())) {			Cursor cursor = getContentResolver().query(uri,					new String[] { MediaStore.Images.Media.DATA }, null, null,					null);			if (null == cursor) {				//Toast.makeText(mContext, R.string.no_found, Toast.LENGTH_SHORT).show();				return;			}			cursor.moveToFirst();			String path = cursor.getString(cursor					.getColumnIndex(MediaStore.Images.Media.DATA));			Log.d("may", "path=" + path);			String extension = path.substring(path.lastIndexOf("."), path.length());			if(FeatureFunction.isPic(extension)){				Intent intent = new Intent(mContext, RotateImageActivity.class);				intent.putExtra("path", path);				startActivityForResult(intent, GlobalParam.REQUEST_GET_BITMAP);				//startPhotoZoom(data.getData());			}else {				//Toast.makeText(mContext, R.string.please_choose_pic, Toast.LENGTH_SHORT).show();			}			//ShowBitmap(false);		} else {			Log.d("may", "path=" + uri.getPath());			String path = uri.getPath();			String extension = path.substring(path.lastIndexOf("."), path.length());			if(FeatureFunction.isPic(extension)){				Intent intent = new Intent(mContext, RotateImageActivity.class);				intent.putExtra("path", path);				startActivityForResult(intent, GlobalParam.REQUEST_GET_BITMAP);			}else {				//Toast.makeText(mContext, R.string.please_choose_pic, Toast.LENGTH_SHORT).show();			}			//mImageFilePath = uri.getPath();			//ShowBitmap(false);		}	}	@Override	public void onItemClick(AdapterView<?> parent, View convertView, int position, long id) {		if(position < mImageList.size()){			if (mImageList.get(position).mType == 2) {				ViewHolder holder = (ViewHolder) convertView.getTag();        		Bitmap bitmap = holder.mHeaderView.getDrawingCache();        		mImageList.get(position).mPicPath = FeatureFunction.saveTempBitmap(bitmap, "goods_icon"+String.valueOf(position)+".jpg");        		mImageList.get(position).mType = 0;        		mAdapter.mImageMap.put(mImageList.get(position).mPicPath, bitmap);				holder.mHeaderView.setDrawingCacheEnabled(false);								Intent showImageIntent = new Intent();				showImageIntent.setClass(mContext, ShowImageActivity.class);				showImageIntent.putExtra("type",1);				showImageIntent.putExtra("pos",position);				showImageIntent.putExtra("img_list",(Serializable)mImageList);				startActivityForResult(showImageIntent, 1);			} else if (mImageList.get(position).mType == 0) {				if(mAdapter.getIsDelete()){					HashMap<String, Bitmap> hashMap = mAdapter.getImageBuffer();					String path = mImageList.get(position).mPicPath;					ImageView view = (ImageView) mMyGridView.findViewWithTag(path);					mImageList.remove(position);					if(view != null){						view.setImageBitmap(null);					}					if (hashMap.get(path) != null) {						Bitmap bitmap = hashMap.get(path);						if(bitmap != null && !bitmap.isRecycled()){							bitmap.recycle();							bitmap = null;						}						hashMap.remove(path);					}					deleteImgFile(path);					if(mImageList.get(mImageList.size() - 1).mType != 1){						mImageList.add(new UploadImg("", 1));					}					mAdapter.notifyDataSetChanged();				}else{					Intent showImageIntent = new Intent();					showImageIntent.setClass(mContext, ShowImageActivity.class);					showImageIntent.putExtra("type",1);					showImageIntent.putExtra("pos",position);					showImageIntent.putExtra("img_list",(Serializable)mImageList);					startActivityForResult(showImageIntent, 1);				}			}else if(mImageList.get(position).mType == 1){				if(mAdapter.getIsDelete()){					mAdapter.setIsDelete(false);					mAdapter.notifyDataSetChanged();				}else {					if(mImageList.size() - 1 >= 5){						Toast.makeText(mContext, mContext.getString(R.string.upload_image_max), Toast.LENGTH_SHORT).show();						return;					}					selectImg();				}			}		}else {			if(mAdapter.getIsDelete()){				mAdapter.setIsDelete(false);				mAdapter.notifyDataSetChanged();			}		}			}	private void selectImg() {		MMAlert.showAlert(mContext, "", mContext.getResources()				.getStringArray(R.array.camer_item), null, new OnAlertSelectId() {			@Override			public void onClick(int whichButton) {				Log.e("whichButton", "whichButton: "+whichButton);				switch (whichButton) {				case 0:					getImageFromGallery();					break;				case 1:					getImageFromCamera();					break;				default:					break;				}			}		});	}	protected void getImageFromCamera() {		Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);		String tempUrl = FeatureFunction.getPhotoFileName(1);		if(FeatureFunction.newFolder(Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY)){			File out = new File(Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY, tempUrl);			Uri uri = Uri.fromFile(out);			intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);			startActivityForResult(intent, GlobalParam.REQUEST_GET_IMAGE_BY_CAMERA);		}	}	protected void getImageFromGallery() {		Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);		intent.setType("image/*");		startActivityForResult(intent, GlobalParam.REQUEST_GET_URI);	}	private void deleteImgFile(String path) {		File file = new File(path);				if(file != null && file.exists()){			file.delete();		}	}	@Override	public void onWindowFocusChanged(boolean hasFocus) {		super.onWindowFocusChanged(hasFocus);				if (isFirstShow) {			isFirstShow = false;		}	}	@Override	protected void onDestroy() {		super.onDestroy();		if(mImageList != null){			for (int i = 0; i < mImageList.size(); i++) {				deleteImgFile(mImageList.get(i).mPicPath);				if(!TextUtils.isEmpty(mImageList.get(i).mPicPath)){					ImageView view = (ImageView) mMyGridView.findViewWithTag(mImageList.get(i).mPicPath);					if(view != null){						view.setImageBitmap(null);					}				}			}		}		if(mAdapter != null){			FeatureFunction.freeBitmap(mAdapter.getImageBuffer());		}	}}