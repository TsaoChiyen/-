package com.chengxin.services.merchant;import java.io.File;import java.io.Serializable;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import android.annotation.SuppressLint;import android.content.ContentUris;import android.content.Context;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.provider.DocumentsContract;import android.provider.MediaStore;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.chengxin.BaseActivity;import com.chengxin.LocationActivity;import com.chengxin.R;import com.chengxin.RotateImageActivity;import com.chengxin.ShowImageActivity;import com.chengxin.Entity.Login;import com.chengxin.Entity.MapInfo;import com.chengxin.Entity.MerchantInfo;import com.chengxin.Entity.Picture;import com.chengxin.Entity.UploadImg;import com.chengxin.Entity.WeiYuanState;import com.chengxin.adapter.UploadPicAdapter;import com.chengxin.adapter.UploadPicAdapter.ViewHolder;import com.chengxin.dialog.MMAlert;import com.chengxin.dialog.MMAlert.OnAlertSelectId;import com.chengxin.global.FeatureFunction;import com.chengxin.global.GlobalParam;import com.chengxin.global.GlobleType;import com.chengxin.global.ImageLoader;import com.chengxin.global.ScreenUtils;import com.chengxin.global.WeiYuanCommon;import com.chengxin.net.WeiYuanException;import com.chengxin.widget.MyGridView;@SuppressLint("NewApi")public class MerchantInfoActivity extends BaseActivity implements OnItemClickListener {	private static final int REQUEST_MERCHANT_TYPE = 0x009001;	private  static final int MSG_MERCHANT_ADDED = 0x8001;	private  static final int MSG_MERCHANT_EDITED = 0x8002;	private int IMAGE_MAX = 5;	private MerchantInfo mMerchant = null;	private EditText mEditCompany;	private EditText mEditAddress;	private EditText mEditCity;	private EditText mEditType;	private ImageView mImageShopPaper;	private ImageView mImageIdCard;	private LinearLayout mLayoutCharge;	private TextView mBtnCharge;	private TextView mTextPromptDetail;	private Button mBtnSubmit;	private ImageLoader mImageLoader = new ImageLoader();	private String mWorkImageFilePath,	mIdCardImageFilePath;	private MyGridView mMyGridView;	private List<UploadImg> mImageList = new ArrayList<UploadImg>();	private int mClickType;	private UploadPicAdapter mAdapter;	private int mWidth = 0;	private List<Picture> picList;	private Bitmap mWorkBitmap;	private Bitmap mIdCardBitmap;	private TextView mTextAdvPromptDetail;	private EditText mEditRankBid;	private EditText mEditAdvBid;	private TextView mBtnRankBid;	private TextView mBtnAdvBid;	private EditText mEditCharge;	private boolean isFirstShow = true;	protected Handler mHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);			switch (msg.what) {			case MSG_MERCHANT_ADDED:			case MSG_MERCHANT_EDITED:				MerchantInfo merchant = (MerchantInfo) msg.obj;								if (merchant != null) {					WeiYuanState state = merchant.state;					if(state == null){						Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();						return;					}										if (state.errorMsg != null && state.errorMsg.length() > 0)						Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();					if(state.code == 0){						Intent intent = new Intent();						intent.putExtra("data", merchant);						setResult(RESULT_OK, intent);						MerchantInfoActivity.this.finish();					}				}				break;							}		}			};	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = this;		setContentView(R.layout.activity_merchant_info);		mWidth = ScreenUtils.getScreenWidth(mContext); 		int mMerchantType = 0;				if (getIntent().hasExtra("data")) {			mMerchant = (MerchantInfo)getIntent().getExtras().get("data");			mMerchantType  = mMerchant.type;		}		if (getIntent().hasExtra("merchant")) {			mMerchantType = getIntent().getIntExtra("merchant", 0);		}				if (mMerchant == null) {			mMerchant = new MerchantInfo();			mMerchant.type = mMerchantType;		}				mWorkImageFilePath = mIdCardImageFilePath = null;		initComponent();		getData();	}	private void initComponent() {		setTitleContent(R.drawable.back_btn, 0, "商户信息管理");		mLeftBtn.setOnClickListener(this);				mEditCompany = (EditText)findViewById(R.id.edit_company);		mEditAddress = (EditText)findViewById(R.id.edit_address);		mEditAddress.setFocusable(false);		mEditAddress.setFocusableInTouchMode(false);		mEditAddress.setOnClickListener(this);		mEditCity = (EditText)findViewById(R.id.edit_city);				mEditType = (EditText)findViewById(R.id.edit_type);		mEditType.setFocusable(false);		mEditType.setFocusableInTouchMode(false);		mEditType.setOnClickListener(this);		mImageShopPaper = (ImageView)findViewById(R.id.image_shop_paper);		mImageIdCard = (ImageView)findViewById(R.id.image_id_card);		mImageShopPaper.setOnClickListener(this);		mImageIdCard.setOnClickListener(this);				mMyGridView  = (MyGridView)findViewById(R.id.gridview);		mMyGridView.setOnItemClickListener(this);		mImageList.add(new UploadImg("", 1));		mAdapter = new UploadPicAdapter(mContext, mImageList, mWidth);		mMyGridView.setAdapter(mAdapter);		mTextAdvPromptDetail = (TextView)findViewById(R.id.text_adv_prompt_detail);		mEditRankBid = (EditText)findViewById(R.id.edit_rank_bid);		mEditAdvBid = (EditText)findViewById(R.id.edit_adv_bid);		mBtnRankBid = (TextView)findViewById(R.id.btn_rank_bid);		mBtnAdvBid = (TextView)findViewById(R.id.btn_adv_bid);		mBtnRankBid.setOnClickListener(this);		mBtnAdvBid.setOnClickListener(this);		mLayoutCharge = (LinearLayout)findViewById(R.id.layout_charge);		mBtnCharge = (TextView)findViewById(R.id.btn_charge);		mEditCharge = (EditText)findViewById(R.id.edit_charge);		mTextPromptDetail = (TextView)findViewById(R.id.text_prompt_detail);				mBtnSubmit = (Button)findViewById(R.id.btn_submit);				mBtnCharge.setOnClickListener(this);		mBtnSubmit.setOnClickListener(this);				if (mMerchant == null || mMerchant.id == 0) {			mBtnSubmit.setText("申请入驻");			mLayoutCharge.setVisibility(View.GONE);		}	}	private void getData() {		if (mMerchant !=null && mMerchant.id > 0) {			if (mMerchant.name != null && !mMerchant.name.equals("") && !mMerchant.name.equals("null")) {				mEditCompany.setText(mMerchant.name);			}			if (mMerchant.address != null && !mMerchant.address.equals("") && !mMerchant.address.equals("null")) {				mEditAddress.setText(mMerchant.address);			}			if (mMerchant.content != null && !mMerchant.content.equals("") && !mMerchant.content.equals("null")) {				mEditCity.setText(mMerchant.content);			}			mEditType.setText(mMerchant.getFeatures());						String imgUrl = mMerchant.getPictureByName("qualification");						if (imgUrl != null && !imgUrl.equals("") && !imgUrl.equals("null")) {				mImageLoader.getBitmap(mContext, mImageShopPaper, null, imgUrl, 0, false, false, false);			}			imgUrl = mMerchant.getPictureByName("logo");			if (imgUrl != null && !imgUrl.equals("") && !imgUrl.equals("null")) {				mImageLoader.getBitmap(mContext, mImageIdCard, null, imgUrl, 0, false, false, false);			}			picList = mMerchant.getPictureList();						if (picList.size() > 0) {				for (int i = 0; i < picList.size(); i++) {					mImageList.add(mImageList.size() - 1, new UploadImg(picList.get(i).smallUrl, 2));				}			}			mTextPromptDetail.setText("10芯币＝1人民币");		}	}	@Override	public void onClick(View v) {		super.onClick(v);				switch (v.getId()) {		case R.id.left_btn:			this.finish();			break;		case R.id.image_shop_paper:			mClickType = 1;			selectImg();			break;		case R.id.image_id_card:			mClickType = 2;			selectImg();			break;		case R.id.btn_rank_bid:		case R.id.btn_adv_bid:			Toast.makeText(mContext, "测试期间，暂不提供竞价排名服务！", Toast.LENGTH_LONG).show();;			break;		case R.id.btn_charge:			Toast.makeText(mContext, "测试期间，暂不提供充值服务！", Toast.LENGTH_LONG).show();;			break;		case R.id.btn_submit:			submit();			break;		case R.id.edit_address:			Intent intent = new Intent(this, LocationActivity.class);			startActivityForResult(intent, GlobleType.RESQUEST_MAP_LOACTION);			break;		case R.id.edit_type:			intent = new Intent();			intent.setClass(mContext, MerchantTypeActivity.class);			intent.putExtra("merchantType", mMerchant.type);			startActivityForResult(intent, REQUEST_MERCHANT_TYPE);			break;		default:			break;		}	}	private void selectImg() {		MMAlert.showAlert(mContext, "", mContext.getResources()				.getStringArray(R.array.camer_item), null, new OnAlertSelectId() {			@Override			public void onClick(int whichButton) {				Log.e("whichButton", "whichButton: "+whichButton);				switch (whichButton) {				case 0:					getImageFromGallery();					break;				case 1:					getImageFromCamera();					break;				default:					break;				}			}		});	}	/*	 * 拍一张	 */	private void getImageFromCamera() {		Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);		String tempUrl = FeatureFunction.getPhotoFileName(1);		if(FeatureFunction.newFolder(Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY)){			File out = new File(Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY, tempUrl);			Uri uri = Uri.fromFile(out);			intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);			startActivityForResult(intent, GlobalParam.REQUEST_GET_IMAGE_BY_CAMERA);		}	}	/*	 * 从相册中选一张	 */	private void getImageFromGallery() {		Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);		intent.setType("image/*");		startActivityForResult(intent, GlobalParam.REQUEST_GET_URI);	}	/*	 * 处理选择的图片	 */	private void doChoose(final boolean isGallery, final Intent data) {		if(isGallery){			originalImage(data);		}else {			if(data != null){				originalImage(data);			}else{				// Here if we give the uri, we need to read it				String tempUrl = WeiYuanCommon.getCamerUrl(mContext);				String path = Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY+tempUrl;				Log.e("path", "path:"+ path);				if(tempUrl == null || tempUrl.equals("")){					Toast.makeText(mContext, "图片不存在!", Toast.LENGTH_LONG).show();					return;				}				Log.e("start-end", path.indexOf(".")+":"+path.length());				String extension = path.substring(path.indexOf("."), path.length());				if(FeatureFunction.isPic(extension)){					//startPhotoZoom(Uri.fromFile(new File(path)));					Intent intent = new Intent(mContext, RotateImageActivity.class);					intent.putExtra("path", path);					intent.putExtra("type", 0);					startActivityForResult(intent, GlobalParam.REQUEST_GET_BITMAP);				}				//mImageFilePath = FeatureFunction.PUB_TEMP_DIRECTORY+TEMP_FILE_NAME;				//ShowBitmap(false);			}		}    }	/**     * 根据图片路径进入裁剪页面     *     * @param data     */	private void originalImage(Intent data) {		/*		 * switch (requestCode) {		 */		// case FLAG_CHOOSE:		Uri uri = data.getData();		//Log.d("may", "uri=" + uri + ", authority=" + uri.getAuthority());		if (!TextUtils.isEmpty(uri.getAuthority())) {			Cursor cursor = getContentResolver().query(uri,					new String[] { MediaStore.Images.Media.DATA }, null, null,					null);			if (null == cursor) {				//Toast.makeText(mContext, R.string.no_found, Toast.LENGTH_SHORT).show();				return;			}			cursor.moveToFirst();			String path = cursor.getString(cursor					.getColumnIndex(MediaStore.Images.Media.DATA));			Log.d("may", "path=" + path);			String extension = path.substring(path.lastIndexOf("."), path.length());			if(FeatureFunction.isPic(extension)){				Intent intent = new Intent(mContext, RotateImageActivity.class);				intent.putExtra("path", path);				startActivityForResult(intent, GlobalParam.REQUEST_GET_BITMAP);				//startPhotoZoom(data.getData());			}else {				//Toast.makeText(mContext, R.string.please_choose_pic, Toast.LENGTH_SHORT).show();			}			//ShowBitmap(false);		} else {			Log.d("may", "path=" + uri.getPath());			String path = uri.getPath();			String extension = path.substring(path.lastIndexOf("."), path.length());			if(FeatureFunction.isPic(extension)){				Intent intent = new Intent(mContext, RotateImageActivity.class);				intent.putExtra("path", path);				startActivityForResult(intent, GlobalParam.REQUEST_GET_BITMAP);			}else {				//Toast.makeText(mContext, R.string.please_choose_pic, Toast.LENGTH_SHORT).show();			}			//mImageFilePath = uri.getPath();			//ShowBitmap(false);		}	}    	/**	 * 裁剪图片	 */	 /**     * 调用系统裁剪功能     *     * @param uri     *            文件URI     */    public void startPhotoZoom(Uri uri) {        Intent intent = new Intent("com.android.camera.action.CROP");        if (android.os.Build.VERSION.SDK_INT > 18) {            String url=getPath(mContext, uri);            intent.setDataAndType(Uri.fromFile(new File(url)), "image/*");        }else{            intent.setDataAndType(uri, "image/*");        }        //intent.setDataAndType(uri, "image/*");        // 下面这个crop=true是设置在开启的Intent中设置显示的VIEW可裁剪        intent.putExtra("crop", "true");        // aspectX aspectY 是宽高的比例        intent.putExtra("aspectX", 1);        intent.putExtra("aspectY", 1);        // outputX outputY 是裁剪图片宽高        intent.putExtra("outputX", 320);        intent.putExtra("outputY", 320);        intent.putExtra("return-data", true);        startActivityForResult(intent, GlobalParam.REQUEST_GET_BITMAP);    }        public static String getPath(final Context context, final Uri uri) {        final boolean isKitKat = Build.VERSION.SDK_INT > 18;        // DocumentProvider        if (isKitKat && DocumentsContract.isDocumentUri(context, uri)) {            // ExternalStorageProvider            if (isExternalStorageDocument(uri)) {                final String docId = DocumentsContract.getDocumentId(uri);                final String[] split = docId.split(":");                final String type = split[0];                if ("primary".equalsIgnoreCase(type)) {                    return Environment.getExternalStorageDirectory() + "/" + split[1];                }            }            // DownloadsProvider            else if (isDownloadsDocument(uri)) {                final String id = DocumentsContract.getDocumentId(uri);                final Uri contentUri = ContentUris.withAppendedId(                        Uri.parse("content://downloads/public_downloads"), Long.valueOf(id));                return getDataColumn(context, contentUri, null, null);            }            // MediaProvider            else if (isMediaDocument(uri)) {                final String docId = DocumentsContract.getDocumentId(uri);                final String[] split = docId.split(":");                final String type = split[0];                Uri contentUri = null;                if ("image".equals(type)) {                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;                } else if ("video".equals(type)) {                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;                } else if ("audio".equals(type)) {                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;                }                final String selection = "_id=?";                final String[] selectionArgs = new String[] {                        split[1]                };                return getDataColumn(context, contentUri, selection, selectionArgs);            }        }        // MediaStore (and general)        else if ("content".equalsIgnoreCase(uri.getScheme())) {            // Return the remote address            if (isGooglePhotosUri(uri))                return uri.getLastPathSegment();            return getDataColumn(context, uri, null, null);        }        // File        else if ("file".equalsIgnoreCase(uri.getScheme())) {            return uri.getPath();        }        return null;    }	public static String getDataColumn(Context context, Uri uri,			String selection, String[] selectionArgs) {		Cursor cursor = null;		final String column = "_data";		final String[] projection = { column };		try {			cursor = context.getContentResolver().query(uri, projection,					selection, selectionArgs, null);			if (cursor != null && cursor.moveToFirst()) {				final int index = cursor.getColumnIndexOrThrow(column);				return cursor.getString(index);			}		} finally {			if (cursor != null)				cursor.close();		}		return null;	}    /**     * @param uri The Uri to check.     * @return Whether the Uri authority is ExternalStorageProvider.     */    public static boolean isExternalStorageDocument(Uri uri) {        return "com.android.externalstorage.documents".equals(uri.getAuthority());    }    /**     * @param uri The Uri to check.     * @return Whether the Uri authority is DownloadsProvider.     */    public static boolean isDownloadsDocument(Uri uri) {        return "com.android.providers.downloads.documents".equals(uri.getAuthority());    }    /**     * @param uri The Uri to check.     * @return Whether the Uri authority is MediaProvider.     */    public static boolean isMediaDocument(Uri uri) {        return "com.android.providers.media.documents".equals(uri.getAuthority());    }    /**     * @param uri The Uri to check.     * @return Whether the Uri authority is Google Photos.     */    public static boolean isGooglePhotosUri(Uri uri) {        return "com.google.android.apps.photos.content".equals(uri.getAuthority());    }	private void submit() {		if (!checkValue()) {			return;		}				if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					if (mMerchant.id == 0) {						WeiYuanCommon.sendMsg(mBaseHandler, BASE_SHOW_PROGRESS_DIALOG, 								mContext.getResources().getString(R.string.get_dataing));						MerchantInfo temp = WeiYuanCommon.getWeiYuanInfo().applyMerchantInfo(mMerchant);						mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);						WeiYuanCommon.sendMsg(mHandler, MSG_MERCHANT_ADDED, temp);					} else {						WeiYuanCommon.sendMsg(mBaseHandler, BASE_SHOW_PROGRESS_DIALOG, 								mContext.getResources().getString(R.string.get_dataing));						MerchantInfo temp = WeiYuanCommon.getWeiYuanInfo().editMerchantInfo(mMerchant);						mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);						WeiYuanCommon.sendMsg(mHandler, MSG_MERCHANT_EDITED, temp);					}									} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();			}	private boolean checkValue() {		mMerchant.name = mEditCompany.getText().toString();		mMerchant.address = mEditAddress.getText().toString();		mMerchant.content = mEditCity.getText().toString();		mMerchant.setPictureByName("qualification", mWorkImageFilePath);		mMerchant.setPictureByName("logo", mIdCardImageFilePath);		String hint = null;				if (mMerchant.name == null || mMerchant.name.equals("")) {			hint = "请输入名称";		} else if (mMerchant.address == null || mMerchant.address.equals("")) {			hint = "请选择地址";		} else if (mMerchant.categories == null || mMerchant.categories.equals("")) {			hint = "请选择经营范围";		} else {			if (mImageList!=null && mImageList.size()>0 ) {				List<Picture> list = new ArrayList<Picture>();								int i = 0;								for (UploadImg img : mImageList) {					if (img.mType == 0) {						Picture pic = new Picture(null, img.mPicPath);												pic.key = "picture" + (i + 1);						pic.newPic = true;						list.add(pic);					}										i++;				}								mMerchant.setPictureList(list);			}			if (mWorkImageFilePath != null && mWorkImageFilePath.length() > 0) {				mMerchant.setPictureByName("qualification", mWorkImageFilePath);			}						if (mIdCardImageFilePath != null && mIdCardImageFilePath.length() > 0) {				mMerchant.setPictureByName("logo", mIdCardImageFilePath);			}		}				if (hint != null && hint.length() > 0) {			Toast.makeText(mContext, hint, Toast.LENGTH_LONG).show();			return false;		}				return true;	}	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);		switch (requestCode) {		case REQUEST_MERCHANT_TYPE:			if(data != null && RESULT_OK == resultCode){				Bundle bundle = data.getExtras();				if(bundle != null){					String ids = data.getStringExtra("selectedIds");					String names = data.getStringExtra("selectedNames");										mMerchant.setCategory(ids);					mEditType.setText(names);				}			}			break;		case GlobleType.RESQUEST_MAP_LOACTION:			if(data != null && RESULT_OK == resultCode){				Bundle bundle = data.getExtras();				if(bundle != null){					MapInfo mapInfo = (MapInfo)data.getSerializableExtra("mapInfo");										if(mapInfo == null){						Toast.makeText(mContext, mContext.getString(R.string.get_location_failed), Toast.LENGTH_SHORT).show();						return;					}					String addr = mapInfo.getAddr();					mEditAddress.setText(addr);					mMerchant.city = getBriefOfCity(mapInfo.getCtiy());					mMerchant.lat = Double.valueOf(mapInfo.getLat());					mMerchant.lng = Double.valueOf(mapInfo.getLng());				}			}			break;		case GlobalParam.REQUEST_GET_URI:			if (resultCode == RESULT_OK) {				doChoose(true, data);			}			break;		case GlobalParam.REQUEST_GET_IMAGE_BY_CAMERA:			if (resultCode == RESULT_OK) {				doChoose(false, data);			}			break;		case GlobalParam.REQUEST_GET_BITMAP:			if (resultCode == RESULT_OK) {				String path = data.getStringExtra("path");				if (!TextUtils.isEmpty(path)) {					if (mClickType == 0) {						// 一张图片不能选择多次						boolean isExist = false;						if (mImageList.size() != 0) {							for (int i = 0; i < mImageList.size(); i++) {								if (mImageList.get(i).mType == 0										&& mImageList.get(i).mPicPath												.equals(path)) {									isExist = true;									break;								}							}						}						if (!isExist) {							mImageList.add(mImageList.size() - 1,									new UploadImg(path, 0));							if (mImageList.size() - 1 == IMAGE_MAX) {								mImageList.remove(mImageList.size() - 1);							}							mAdapter.notifyDataSetChanged();						}					} else if (mClickType == 1) {						mWorkImageFilePath = path;						mImageShopPaper.setImageBitmap(null);						if (mWorkBitmap != null								&& !mWorkBitmap.isRecycled()) {							mWorkBitmap.recycle();							mWorkBitmap = null;						}						mWorkBitmap = BitmapFactory.decodeFile(path);						mImageShopPaper.setImageBitmap(mWorkBitmap);					} else if (mClickType == 2) {						mIdCardImageFilePath = path;						mImageIdCard.setImageBitmap(null);						if (mIdCardBitmap != null								&& !mIdCardBitmap.isRecycled()) {							mIdCardBitmap.recycle();							mIdCardBitmap = null;						}						mIdCardBitmap = BitmapFactory.decodeFile(path);						mImageIdCard.setImageBitmap(mIdCardBitmap);					}				}			}			break;		case 1:			if(data!= null && resultCode == 2){				List<UploadImg> imgList = (List<UploadImg>) data.getSerializableExtra("img_list");								if(imgList!=null && imgList.size()>0){					if(mImageList!=null && mImageList.size()>0){						mImageList.clear();					}					mImageList.addAll(imgList);					mAdapter.notifyDataSetChanged();				}			}			break;		}	}		private String getBriefOfCity(String city) {		String mCity = city;				if (city.endsWith("市") || city.endsWith("省")) {			mCity = city.substring(0, city.length() - 1);		} else if (city.endsWith("特别行政区")) { 			mCity = city.substring(0, city.length() - 5);		}else {			mCity = city;		}				return mCity;	}	@Override	public void onItemClick(AdapterView<?> parent, View convertView, int position, long id) {		mClickType = 0;				if(position < mImageList.size()){			if (mImageList.get(position).mType == 2) {				ViewHolder holder = (ViewHolder) convertView.getTag();        		Bitmap bitmap = holder.mHeaderView.getDrawingCache();        		mImageList.get(position).mPicPath = FeatureFunction.saveTempBitmap(bitmap, "goods_icon"+String.valueOf(position)+".jpg");        		mImageList.get(position).mType = 0;        		mAdapter.mImageMap.put(mImageList.get(position).mPicPath, bitmap);				holder.mHeaderView.setDrawingCacheEnabled(false);								Intent showImageIntent = new Intent();				showImageIntent.setClass(mContext, ShowImageActivity.class);				showImageIntent.putExtra("type",1);				showImageIntent.putExtra("pos",position);				showImageIntent.putExtra("img_list",(Serializable)mImageList);				startActivityForResult(showImageIntent, 1);			} else if (mImageList.get(position).mType == 0) {				if(mAdapter.getIsDelete()){					HashMap<String, Bitmap> hashMap = mAdapter.getImageBuffer();					String path = mImageList.get(position).mPicPath;					ImageView view = (ImageView) mMyGridView.findViewWithTag(path);					mImageList.remove(position);					if(view != null){						view.setImageBitmap(null);					}					if (hashMap.get(path) != null) {						Bitmap bitmap = hashMap.get(path);						if(bitmap != null && !bitmap.isRecycled()){							bitmap.recycle();							bitmap = null;						}						hashMap.remove(path);					}					deleteImgFile(path);					if(mImageList.get(mImageList.size() - 1).mType != 1){						mImageList.add(new UploadImg("", 1));					}					mAdapter.notifyDataSetChanged();				}else{					Intent showImageIntent = new Intent();					showImageIntent.setClass(mContext, ShowImageActivity.class);					showImageIntent.putExtra("type",1);					showImageIntent.putExtra("pos",position);					showImageIntent.putExtra("img_list",(Serializable)mImageList);					startActivityForResult(showImageIntent, 1);				}			}else if(mImageList.get(position).mType == 1){				if(mAdapter.getIsDelete()){					mAdapter.setIsDelete(false);					mAdapter.notifyDataSetChanged();				}else {					if(mImageList.size() - 1 >= IMAGE_MAX){						Toast.makeText(mContext, mContext.getString(R.string.upload_image_max), Toast.LENGTH_SHORT).show();						return;					}					selectImg();				}			}		}else {			if(mAdapter.getIsDelete()){				mAdapter.setIsDelete(false);				mAdapter.notifyDataSetChanged();			}		}			}		private void deleteImgFile(String path){		File file = new File(path);				if(file != null && file.exists()){			file.delete();		}	}	@Override	public void onWindowFocusChanged(boolean hasFocus) {		super.onWindowFocusChanged(hasFocus);				if (isFirstShow) {			isFirstShow = false;//			if (hasFocus && mMerchant != null) {//				isFirstShow  = false;//				mWorkBitmap = mImageShopPaper.getDrawingCache();//				mWorkImageFilePath = FeatureFunction.saveTempBitmap(mWorkBitmap, "merchant_paper.jpg");//				mImageShopPaper.setDrawingCacheEnabled(false);////				mIdCardBitmap = mImageIdCard.getDrawingCache();//				mIdCardImageFilePath = FeatureFunction.saveTempBitmap(mIdCardBitmap, "merchant_logo.jpg");//				mImageIdCard.setDrawingCacheEnabled(false);//			}		}	}		@Override	protected void onDestroy() {		super.onDestroy();		if(mImageList != null){			for (int i = 0; i < mImageList.size(); i++) {				deleteImgFile(mImageList.get(i).mPicPath);				if(!TextUtils.isEmpty(mImageList.get(i).mPicPath)){					ImageView view = (ImageView) mMyGridView.findViewWithTag(mImageList.get(i).mPicPath);					if(view != null){						view.setImageBitmap(null);					}				}			}		}		if(mAdapter != null){			FeatureFunction.freeBitmap(mAdapter.getImageBuffer());		}		mImageShopPaper.setImageBitmap(null);		if(mWorkBitmap != null && !mWorkBitmap.isRecycled()){			mWorkBitmap.recycle();			mWorkBitmap = null;		}		mImageIdCard.setImageBitmap(null);		if(mIdCardBitmap != null && !mIdCardBitmap.isRecycled()){			mIdCardBitmap.recycle();			mIdCardBitmap = null;		}	}}