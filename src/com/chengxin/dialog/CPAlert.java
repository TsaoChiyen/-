package com.chengxin.dialog;import java.util.Calendar;import java.util.Date;import net.simonvt.numberpicker.NumberPicker;import net.simonvt.numberpicker.NumberPicker.OnScrollListener;import net.simonvt.numberpicker.NumberPicker.OnValueChangeListener;import android.app.Dialog;import android.content.Context;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.Window;import android.view.WindowManager;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import com.chengxin.R;import com.chengxin.Entity.Country;import com.chengxin.Entity.CountryList;import com.chengxin.global.FeatureFunction;public final class CPAlert{	public static class NumberData {		public int number;		public int minNum;		public int maxNum;		public String suffix;		public NumberData() {			super();		}				public NumberData(int number, int minNum, int maxNum, String suffix) {			super();			this.number = number;			this.minNum = minNum;			this.maxNum = maxNum;			this.suffix = suffix;		}		public int count() {			if (maxNum > minNum) return maxNum - minNum + 1; 			return 0;		}	}		public interface OnAlertRangeSelected	{		void onOkClick(int start, int end);	}	public interface OnAlertOkSelectId	{		void onOkClick(int whichButton,String state, String city);	}	public interface OnAlertInputOk	{		void onOkClick(int whichButton,String[] out);	}	public interface OnAlertDateSelectId	{		void onOkClick(int whichButton, Date date);	}	public interface OnAlertDaySelectId	{		void onOkClick(int whichButton, int day);	}	private static Country mCurrentCountry;	private static String mCity = null;	private static String mState = null;	private static String mItem = null;	private static int mYear = 0;	private static int mMonth = 0;	private static int mDay = 0;	private static int mStart = 0;	private static int mEnd = 0;	private static int id = 0;	private CPAlert()	{	}	/**	 * @param context	Context.	 * @param title     The title of this AlertDialog can be null .	 * @param items     button name list.	 * @param alertDo   methods call Id:Button + cancel_Button.	 * @param exit      Name can be null.It will be Red Color	 * 	 * @return A AlertDialog	 */	public static Dialog showInputAlert(			final Context context,			final String title,			final OnAlertInputOk alertDo) {		final Dialog dlg = new Dialog(context, R.style.DIThem_DataSheet);		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);		final LinearLayout alertView = (LinearLayout) inflater.inflate(R.layout.input_dialog, null);		final int cFullFillWidth = 10000;		alertView.setMinimumWidth(cFullFillWidth);		TextView mLeftBtn = (TextView)alertView.findViewById(R.id.left_text_btn);		TextView mRightBtn = (TextView)alertView.findViewById(R.id.right_text_btn);		TextView mTitileView = (TextView)alertView.findViewById(R.id.title);		final EditText edit1 = (EditText)alertView.findViewById(R.id.EditText01);		final EditText edit2 = (EditText)alertView.findViewById(R.id.editText1);				if (title!= null && !title.equals("")) {			mTitileView.setText(title);		}				mLeftBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				dlg.dismiss();			}		});				mRightBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				if (alertDo != null) {					String[] mOut = {edit1.getText().toString(), edit2.getText().toString()};					alertDo.onOkClick(0, mOut);				}								dlg.dismiss();			}		});				Window w = dlg.getWindow();		WindowManager.LayoutParams lp = w.getAttributes();		lp.x = 0;		final int cMakeBottom = -1000;		lp.y = cMakeBottom;		lp.gravity = Gravity.TOP;		dlg.onWindowAttributesChanged(lp);		dlg.setCanceledOnTouchOutside(true);		dlg.setContentView(alertView);		dlg.show();		return dlg;	}	/**	 * @param context	Context.	 * @param title     The title of this AlertDialog can be null .	 * @param items     button name list.	 * @param alertDo   methods call Id:Button + cancel_Button.	 * @param exit      Name can be null.It will be Red Color	 * 	 * @return A AlertDialog	 */	public static Dialog showAlert(			final Context context,			final String title,			final CountryList stateList,			final OnAlertOkSelectId alertDo) {		final Dialog dlg = new Dialog(context, R.style.MMThem_DataSheet);		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);		final LinearLayout alertView = (LinearLayout) inflater.inflate(R.layout.address_picker_view, null);		final int cFullFillWidth = 10000;		alertView.setMinimumWidth(cFullFillWidth);		TextView mLeftBtn = (TextView)alertView.findViewById(R.id.left_text_btn);		TextView mRightBtn = (TextView)alertView.findViewById(R.id.right_text_btn);		TextView mTitileView = (TextView)alertView.findViewById(R.id.title);		if (title!= null && !title.equals("")) {			mTitileView.setText(title);		}				mLeftBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				dlg.dismiss();			}		});				mRightBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				if (alertDo != null) {					alertDo.onOkClick(0, mState, mCity);				}								dlg.dismiss();			}		});				final NumberPicker statePicker = (NumberPicker) alertView.findViewById(R.id.NPState);		statePicker.setDisplayedValues(stateList.getString());		statePicker.setMaxValue(stateList.size() - 1);		statePicker.setMinValue(0);		statePicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		statePicker.setWrapSelectorWheel(false);				final NumberPicker cityPicker = (NumberPicker) alertView.findViewById(R.id.NPCity);		mCurrentCountry = stateList.mCountryList.get(0);		mState = mCurrentCountry.country;				cityPicker.setDisplayedValues(mCurrentCountry.getChildrenString());		cityPicker.setMaxValue(mCurrentCountry.children() - 1);		cityPicker.setMinValue(0);		cityPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		cityPicker.setWrapSelectorWheel(false);		statePicker.setOnScrollListener(new OnScrollListener() {						@Override			public void onScrollStateChange(NumberPicker view, int scrollState) {				if (scrollState == NumberPicker.OnScrollListener.SCROLL_STATE_IDLE) {					int newVal = view.getValue();					mCurrentCountry = stateList.mCountryList.get(newVal);					mState = mCurrentCountry.country;						cityPicker.setValue(0);					cityPicker.setMaxValue(0);					cityPicker.setDisplayedValues(mCurrentCountry.getChildrenString());					cityPicker.setMaxValue(mCurrentCountry.children() - 1);					cityPicker.setMinValue(0);					cityPicker.setWrapSelectorWheel(false);				}			}		});				cityPicker.setOnScrollListener(new OnScrollListener() {						@Override			public void onScrollStateChange(NumberPicker view, int scrollState) {				if (scrollState == NumberPicker.OnScrollListener.SCROLL_STATE_IDLE) {					int newVal = view.getValue();					if (newVal > 0) {						mCity = mCurrentCountry.childList.get(newVal).text;					} else {						mCity = null;					}									}			}		});		Window w = dlg.getWindow();		WindowManager.LayoutParams lp = w.getAttributes();		lp.x = 0;		final int cMakeBottom = -1000;		lp.y = cMakeBottom;		lp.gravity = Gravity.BOTTOM;		dlg.onWindowAttributesChanged(lp);		dlg.setCanceledOnTouchOutside(true);		dlg.setContentView(alertView);		dlg.show();		return dlg;	}	public static Dialog showAlert(			final Context context,			final String title,			final String[] list,			final OnAlertOkSelectId alertDo) {		final Dialog dlg = new Dialog(context, R.style.MMThem_DataSheet);		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);		final LinearLayout alertView = (LinearLayout) inflater.inflate(R.layout.address_picker_view, null);		final int cFullFillWidth = 10000;		alertView.setMinimumWidth(cFullFillWidth);		TextView mLeftBtn = (TextView)alertView.findViewById(R.id.left_text_btn);		TextView mRightBtn = (TextView)alertView.findViewById(R.id.right_text_btn);		TextView mTitileView = (TextView)alertView.findViewById(R.id.title);		if (title!= null && !title.equals("")) {			mTitileView.setText(title);		}				mLeftBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				dlg.dismiss();			}		});				mRightBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				if (alertDo != null) {					alertDo.onOkClick(id, null, mItem);				}								dlg.dismiss();			}		});				final NumberPicker statePicker = (NumberPicker) alertView.findViewById(R.id.NPState);		statePicker.setVisibility(View.GONE);				final NumberPicker cityPicker = (NumberPicker) alertView.findViewById(R.id.NPCity);		cityPicker.setDisplayedValues(list);		cityPicker.setMaxValue(list.length - 1);		cityPicker.setMinValue(0);		cityPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		cityPicker.setWrapSelectorWheel(false);		mItem = list[0];				cityPicker.setOnValueChangedListener(new OnValueChangeListener() {						@Override			public void onValueChange(NumberPicker picker, int oldVal, int newVal) {				if (newVal > 0) {					id = newVal;					mItem = list[newVal];				} else {					mItem = null;				}			}		});		Window w = dlg.getWindow();		WindowManager.LayoutParams lp = w.getAttributes();		lp.x = 0;		final int cMakeBottom = -1000;		lp.y = cMakeBottom;		lp.gravity = Gravity.BOTTOM;		dlg.onWindowAttributesChanged(lp);		dlg.setCanceledOnTouchOutside(true);		dlg.setContentView(alertView);		dlg.show();		return dlg;	}	public static Dialog showAlert(			final Context context,			final String title,			final Date oldDate,			final OnAlertDateSelectId alertDo) {		final Dialog dlg = new Dialog(context, R.style.MMThem_DataSheet);		Calendar c = Calendar.getInstance();				if (oldDate != null) {			c.setTime(oldDate);		}				mYear = c.get(Calendar.YEAR);  		mMonth = c.get(Calendar.MONTH) + 1;  		mDay = c.get(Calendar.DAY_OF_MONTH); 		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);		final LinearLayout alertView = (LinearLayout) inflater.inflate(R.layout.date_picker_view, null);		final int cFullFillWidth = 10000;		alertView.setMinimumWidth(cFullFillWidth);		TextView mLeftBtn = (TextView)alertView.findViewById(R.id.left_text_btn);		TextView mRightBtn = (TextView)alertView.findViewById(R.id.right_text_btn);		TextView mTitileView = (TextView)alertView.findViewById(R.id.title);		if (title!= null && !title.equals("")) {			mTitileView.setText(title);		}				mLeftBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				dlg.dismiss();			}		});				mRightBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				Date date = FeatureFunction.convertToDate(mYear, mMonth, mDay);								if (alertDo != null) {					alertDo.onOkClick(0, date);				}												dlg.dismiss();			}		});				final String ylist[] = new String[200];				for (int i = 0; i < 200; i++) {			ylist[i] = 1900 + i + "年";		}		final String mlist[] = new String[12];				for (int i = 0; i < 12; i++) {			mlist[i] = 1 + i + "月";		}		final String dlist[] = new String[31];				for (int i = 0; i < 31; i++) {			dlist[i] = 1 + i + "日";		}				final NumberPicker yearPicker = (NumberPicker) alertView.findViewById(R.id.NPYear);		final NumberPicker monthPicker = (NumberPicker) alertView.findViewById(R.id.NPMonth);		final NumberPicker dayPicker = (NumberPicker) alertView.findViewById(R.id.NPDay);		yearPicker.setDisplayedValues(ylist);		yearPicker.setMaxValue(199);		yearPicker.setMinValue(0);		yearPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		yearPicker.setValue(mYear - 1900);		yearPicker.setWrapSelectorWheel(true);				yearPicker.setOnScrollListener(new OnScrollListener() {						@Override			public void onScrollStateChange(NumberPicker view, int scrollState) {				if (scrollState == NumberPicker.OnScrollListener.SCROLL_STATE_IDLE) {					mYear = view.getValue() + 1900;										switch (mMonth) {					case 2:						if ((mYear % 4) == 0 && (mYear % 100) != 0)							dayPicker.setMaxValue(28);						else							dayPicker.setMaxValue(27);						break;					case 4:					case 6:					case 9:					case 11:						dayPicker.setMaxValue(29);						break;					default:						dayPicker.setMaxValue(30);						break;					}				}			}					});		monthPicker.setDisplayedValues(mlist);		monthPicker.setMaxValue(11);		monthPicker.setMinValue(0);		monthPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		monthPicker.setValue(mMonth - 1);		monthPicker.setWrapSelectorWheel(true);		monthPicker.setOnScrollListener(new OnScrollListener() {						@Override			public void onScrollStateChange(NumberPicker view, int scrollState) {				if (scrollState == NumberPicker.OnScrollListener.SCROLL_STATE_IDLE) {					mMonth = view.getValue() + 1;										switch (mMonth) {					case 2:						if ((mYear % 4) == 0 && (mYear % 100) != 0)							dayPicker.setMaxValue(28);						else							dayPicker.setMaxValue(27);						break;					case 4:					case 6:					case 9:					case 11:						dayPicker.setMaxValue(29);						break;					default:						dayPicker.setMaxValue(30);						break;					}				}			}					});		dayPicker.setDisplayedValues(dlist);		dayPicker.setMaxValue(30);		dayPicker.setMinValue(0);		dayPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		dayPicker.setValue(mDay - 1);		dayPicker.setWrapSelectorWheel(true);		dayPicker.setOnValueChangedListener(new OnValueChangeListener() {			@Override			public void onValueChange(NumberPicker picker, int oldVal, int newVal) {				mDay = newVal + 1;			}					});				Window w = dlg.getWindow();		WindowManager.LayoutParams lp = w.getAttributes();		lp.x = 0;		final int cMakeBottom = -1000;		lp.y = cMakeBottom;		lp.gravity = Gravity.BOTTOM;		dlg.onWindowAttributesChanged(lp);		dlg.setCanceledOnTouchOutside(true);		dlg.setContentView(alertView);		dlg.show();		return dlg;	}	public static Dialog showAlert(			final Context context,			final String title,			final NumberData first,			final NumberData second,			final OnAlertRangeSelected alertDo) {		if (first == null || second == null) return null;				mStart = first.number;		mEnd = second.number;				final Dialog dlg = new Dialog(context, R.style.MMThem_DataSheet);		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);		final LinearLayout alertView = (LinearLayout) inflater.inflate(R.layout.date_picker_view, null);		final int cFullFillWidth = 10000;		alertView.setMinimumWidth(cFullFillWidth);		TextView mLeftBtn = (TextView)alertView.findViewById(R.id.left_text_btn);		TextView mRightBtn = (TextView)alertView.findViewById(R.id.right_text_btn);		TextView mTitileView = (TextView)alertView.findViewById(R.id.title);		if (title!= null && !title.equals("")) {			mTitileView.setText(title);		}				mLeftBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				dlg.dismiss();			}		});				mRightBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				if (alertDo != null) {					alertDo.onOkClick(mStart, mEnd);				}				dlg.dismiss();			}		});				final String sList[] = new String[first.count()];				for (int i = 0; i < first.count(); i++) {			sList[i] = first.minNum + i + first.suffix;		}		final String eList[] = new String[second.count()];				for (int i = 0; i < first.count(); i++) {			eList[i] = second.minNum + i + second.suffix;		}				final NumberPicker yearPicker = (NumberPicker) alertView.findViewById(R.id.NPYear);		final NumberPicker monthPicker = (NumberPicker) alertView.findViewById(R.id.NPMonth);		final NumberPicker dayPicker = (NumberPicker) alertView.findViewById(R.id.NPDay);		yearPicker.setVisibility(View.GONE);		dayPicker.setDisplayedValues(eList);		dayPicker.setMaxValue(second.count() - 1);		dayPicker.setMinValue(0);		dayPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		dayPicker.setValue(mEnd - second.minNum);//		dayPicker.setWrapSelectorWheel(true);		dayPicker.setOnValueChangedListener(new OnValueChangeListener() {			@Override			public void onValueChange(NumberPicker picker, int oldVal, int newVal) {				mEnd = newVal + second.minNum;				if (mStart > mEnd) {					monthPicker.setValue(newVal);				}			}					});				monthPicker.setDisplayedValues(sList);		monthPicker.setMaxValue(first.count() - 1);		monthPicker.setMinValue(0);		monthPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		monthPicker.setValue(mStart - first.minNum);//		monthPicker.setWrapSelectorWheel(true);		monthPicker.setOnValueChangedListener(new OnValueChangeListener() {			@Override			public void onValueChange(NumberPicker picker, int oldVal, int newVal) {				mStart = newVal + first.minNum;								if (mStart > mEnd) {					dayPicker.setValue(newVal);				}			}					});		Window w = dlg.getWindow();		WindowManager.LayoutParams lp = w.getAttributes();		lp.x = 0;		final int cMakeBottom = -1000;		lp.y = cMakeBottom;		lp.gravity = Gravity.BOTTOM;		dlg.onWindowAttributesChanged(lp);		dlg.setCanceledOnTouchOutside(true);		dlg.setContentView(alertView);		dlg.show();		return dlg;	}	public static Dialog showAlert(			final Context context,			final String title,			final int day,			final int maxDay,			final String suffix,			final OnAlertDaySelectId alertDo) {		mDay = day;				final Dialog dlg = new Dialog(context, R.style.MMThem_DataSheet);		LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);		final LinearLayout alertView = (LinearLayout) inflater.inflate(R.layout.date_picker_view, null);		final int cFullFillWidth = 10000;		alertView.setMinimumWidth(cFullFillWidth);		TextView mLeftBtn = (TextView)alertView.findViewById(R.id.left_text_btn);		TextView mRightBtn = (TextView)alertView.findViewById(R.id.right_text_btn);		TextView mTitileView = (TextView)alertView.findViewById(R.id.title);		if (title!= null && !title.equals("")) {			mTitileView.setText(title);		}				mLeftBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				dlg.dismiss();			}		});				mRightBtn.setOnClickListener(new OnClickListener() {						@Override			public void onClick(View v) {				if (alertDo != null) {					alertDo.onOkClick(0, mDay);				}				dlg.dismiss();			}		});				final String dlist[] = new String[maxDay];				for (int i = 0; i < maxDay; i++) {			dlist[i] = 1 + i + suffix;		}				final NumberPicker yearPicker = (NumberPicker) alertView.findViewById(R.id.NPYear);		final NumberPicker monthPicker = (NumberPicker) alertView.findViewById(R.id.NPMonth);		final NumberPicker dayPicker = (NumberPicker) alertView.findViewById(R.id.NPDay);		yearPicker.setVisibility(View.GONE);		monthPicker.setVisibility(View.GONE);		dayPicker.setDisplayedValues(dlist);		dayPicker.setMaxValue(maxDay - 1);		dayPicker.setMinValue(0);		dayPicker.setDescendantFocusability(NumberPicker.FOCUS_BLOCK_DESCENDANTS);		dayPicker.setValue(mDay - 1);		dayPicker.setWrapSelectorWheel(true);		dayPicker.setOnValueChangedListener(new OnValueChangeListener() {			@Override			public void onValueChange(NumberPicker picker, int oldVal, int newVal) {				mDay = newVal + 1;			}					});				Window w = dlg.getWindow();		WindowManager.LayoutParams lp = w.getAttributes();		lp.x = 0;		final int cMakeBottom = -1000;		lp.y = cMakeBottom;		lp.gravity = Gravity.BOTTOM;		dlg.onWindowAttributesChanged(lp);		dlg.setCanceledOnTouchOutside(true);		dlg.setContentView(alertView);		dlg.show();		return dlg;	}}