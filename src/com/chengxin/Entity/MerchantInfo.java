package com.chengxin.Entity;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import android.R.integer;import com.chengxin.org.json.JSONArray;import com.chengxin.org.json.JSONException;import com.chengxin.org.json.JSONObject;public class MerchantInfo implements Serializable {	/**	 * 	 */	private static final long serialVersionUID = 1L;    public int 		id;             	//< 商户id    public String 	uid;          		//< 用户id    public int  	type;				//< 商户类型	1:农家乐,2:住宿,3:休闲娱乐,4:餐饮    public String	categories[];		//< 经营范围或特点    public String 	name;         		//< 商铺名称    public String 	phone;        		//< 联系电话    public List< Picture > attachment;	//< 附件    public String 	city;         		//< 商户所在城市    public String 	address;      		//< 商户地址    public double 	lat;          		//< 商铺纬度    public double 	lng;          		//< 商铺经度    public String 	content;      		//< 备注    public int 		status;         	//< 商户状态    public int 		distance;       	//< 距离    public long 	createtime;     	//< 入驻时间    public double 	money;        		//< 融资资金    public Login user;                      //< 用户信息    public WeiYuanState state;              //< 返回的状态对象    	public MerchantInfo() {		super();	}	public MerchantInfo(String reqString) {		super();        try {			if(reqString == null || reqString.equals("")){				return;			}			initCompent(new JSONObject(reqString));		} catch (JSONException e) {			e.printStackTrace();		}	}	public MerchantInfo(JSONObject obj){		try {			initCompent(obj);		} catch (JSONException e) {			e.printStackTrace();		}	}		private void initCompent(JSONObject json) throws JSONException{		if(json == null || json.equals("")){			return;		}                if(!json.isNull("data")){			String dataString = json.getString("data");		            if(dataString != null && !dataString.equals("")					&& dataString.startsWith("{")){				init(json.getJSONObject("data"));			}		}else{			init(json);		}        		if(!json.isNull("state")){			String stateString = json.getString("state");			            if(stateString != null && !stateString.equals("")					&& stateString.startsWith("{")){			                state = new WeiYuanState(json.getJSONObject("state"));			}		}	}	private void init(JSONObject json) throws JSONException{		if(json == null || json.equals("")){			return;		}		id          = json.getInt("id");		uid         = json.getString("uid");		type		= json.getInt("type");        name	    = json.getString("name");        phone	    = json.getString("phone");        city        = json.getString("city");        address     = json.getString("address");        content     = json.getString("content");		lat         = json.getDouble("lat");		lng         = json.getDouble("lng");        money       = json.getDouble("money");		status      = json.getInt("status");		createtime  = json.getLong("createtime");		distance    = json.getInt("distance");        		if (!json.isNull("category")) {			String category = json.getString("category");			categories = category.split(",");		}				if (!json.isNull("picture")) {			String picString = json.getString("picture");            			if((picString != null && !picString.equals(""))					&& picString.startsWith("[") && picString.endsWith("]")){				JSONArray array = new JSONArray(picString);			                if(array != null && array.length()>0){					attachment = new ArrayList<Picture>();				                    for (int i = 0; i < array.length(); i++) {                    	attachment.add(Picture.getInfo(array.getString(i)));					}				}			}		}				if (!json.isNull("user")) {			String userString = json.getString("user");            			if((userString != null && !userString.equals(""))					&& userString.startsWith("{")){				user = new Login(json.getJSONObject("user"));			}		}	}        public static List<MerchantInfo> constructList(JSONArray array) {        try {            List<MerchantInfo> merchantInfoList = new ArrayList<MerchantInfo>();            int size = array.length();                        for (int i = 0; i < size; i++) {            	merchantInfoList.add(new MerchantInfo(array.getJSONObject(i)));            }                        return merchantInfoList;        } catch (JSONException jsone) {            jsone.printStackTrace();        }                return null;    }	public String getSmallPictureByNmae(String name) {		if (attachment != null && attachment.size() > 0) {			for (Picture pic : attachment) {				if (pic.key.equals(name)) {					return pic.smallUrl;				}			}		}				return null;	}	public String getPictureByName(String name) {		if (attachment != null && attachment.size() > 0) {			for (Picture pic : attachment) {				if (pic.key.equals(name)) {					return pic.originUrl;				}			}		}				return null;	}	public List< Picture > getPictureList() {		List<Picture> list = new ArrayList<Picture>();		if (attachment != null && attachment.size() > 0) {			for (Picture pic : attachment) {				if (pic.key.startsWith("picture")) {					list.add(pic);				}			}		}				return list;	}	public void setPictureList(List< Picture > list) {		if (attachment == null && attachment.size() > 0) {			attachment = new ArrayList<Picture>();		}				List<Integer>keys = new ArrayList<Integer>();				for (int i = 0; i < attachment.size(); i++) {			Picture pic = attachment.get(i);						if (pic.key.startsWith("picture")) {				try {					int iKey = Integer.valueOf(pic.key.replace("picture", ""));					keys.add(iKey);				} catch (Exception e) {					e.printStackTrace();				}			}		}				int j = 0;				for (int i = 0; i < 5 && j < list.size(); i++) {			if (!keys.contains(i + 1)) {				list.get(j++).key = "picture" + (i + 1);			}		}				attachment.addAll(list);	}	public String getFeatures() {		String szFeature = "";				if (categories != null && categories.length > 0) {			for (int i = 0; i < categories.length; i++) {				if (szFeature.length() > 0) {					szFeature += ",";				}								int idx = 0;								try {					idx = Integer.valueOf(categories[i]);					szFeature += MerchantCategory.getName(type, idx);				} catch (Exception e) {					e.printStackTrace();				}			}		}		return szFeature;	}	public void setPictureByName(String key, String path) {		boolean isSet = false;				if (attachment != null && attachment.size() > 0) {			for (Picture pic : attachment) {				if (pic.key.equals(key)) {					pic.originUrl = path;					pic.newPic = true;					isSet = true;					break;				}			}		}				if (isSet == false) {			Picture pic = new Picture("", path);			pic.newPic = true;			pic.key = key;						if (attachment == null) {				attachment = new ArrayList< Picture >();			}						attachment.add(pic);		}	}	public void setCategory(String ids) {		categories = ids.split(",");	}	public void setAttachment(List<Picture> list) {		if (attachment == null) {			attachment = new ArrayList<Picture>();		} else {			attachment.clear();		}				attachment.addAll(list);	}}