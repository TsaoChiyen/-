package com.chengxin.Entity;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import com.chengxin.org.json.JSONArray;import com.chengxin.org.json.JSONException;import com.chengxin.org.json.JSONObject;public class MerchantGoods  implements Serializable {		/**	 *	 */	private static final long serialVersionUID = 1L;	/**	 *  融资商品表	 */	public int id;              //< 商品id	public int shopid;          //< 融资商id	public String type;        	//< 商品类型	public String name;     	//< 商品名	public Double price;     	//< 价格    public List< Picture > attachment;	//< 附件	public String features;    	//< 特征	public String material;    	//< 材料		public double bidding;     	//< 竞价排名价格	public double adPrice;     	//< 广告位价格		public String createtime;  	//< 登记时间	public String uid;         	//< 用户uid	public String headsmall;   	//< 用户头像图标		public double lng;         	//< 用户注册位置的经度	public double lat;         	//< 用户注册位置的纬度		public double distance;    	//< 用户头像图标	public Login   	 user;         		//< 用户对象	public MerchantInfo mechant;    		//< 用户的融资商户信息对象    public boolean selected;            //< ui操作，是否选择    public WeiYuanState state;          //< 返回的状态对象	public MerchantGoods() {		super();	}	public MerchantGoods(String reqString) {		super();		try {			if(reqString == null || reqString.equals("")){				return;			}			initCompent(new JSONObject(reqString));		} catch (JSONException e) {			e.printStackTrace();		}	}	public MerchantGoods(JSONObject obj){		try {			initCompent(obj);		} catch (JSONException e) {			e.printStackTrace();		}	}		private void initCompent(JSONObject json) throws JSONException{		if(json == null || json.equals("")){			return;		}// data - id		if(!json.isNull("data")){			String dataString = json.getString("data");			if(dataString != null && !dataString.equals("")					&& dataString.startsWith("{")){				init(json.getJSONObject("data"));			}		}else{			init(json);		}		if(!json.isNull("state")){			String stateString = json.getString("state");			if(stateString != null && !stateString.equals("")					&& stateString.startsWith("{")){				state = new WeiYuanState(json.getJSONObject("state"));			}		}	}	private void init(JSONObject json) throws JSONException{		if(json == null || json.equals("")){			return;		}				id          = json.getInt("id");		shopid      = json.getInt("shopid");		price		= json.getDouble("price");        name        = json.getString("name");		type	    = json.getString("type");		features    = json.getString("features");		material    = json.getString("material");        bidding     = json.getDouble("bidding");        adPrice     = json.getDouble("adPrice");        createtime  = json.getString("createtime");		if (!json.isNull("picture")) {			String picString = json.getString("picture");            			if((picString != null && !picString.equals(""))					&& picString.startsWith("[") && picString.endsWith("]")){				JSONArray array = new JSONArray(picString);			                if(array != null && array.length()>0){					attachment = new ArrayList<Picture>();				                    for (int i = 0; i < array.length(); i++) {                    	attachment.add(Picture.getInfo(array.getString(i)));					}				}			}		}		selected    = false;	}        public static List<MerchantGoods> constructList(JSONArray array){        try {            List<MerchantGoods> goodsList = new ArrayList<MerchantGoods>();            int size = array.length();                        for (int i = 0; i < size; i++) {                goodsList.add(new MerchantGoods(array.getJSONObject(i)));            }                        return goodsList;        } catch (JSONException jsone) {            jsone.printStackTrace();        }                return null;    }	public void setPictureList(List<Picture> list) {		if (attachment == null) {			attachment = new ArrayList<Picture>();		}		List<Integer>keys = new ArrayList<Integer>();				for (int i = 0; i < attachment.size(); i++) {			Picture pic = attachment.get(i);						try {				int iKey = Integer.valueOf(pic.key.replace("picture", ""));				keys.add(iKey);			} catch (Exception e) {				e.printStackTrace();			}		}				int j = 0;				for (int i = 0; i < 5 && j < list.size(); i++) {			if (!keys.contains(i + 1)) {				list.get(j++).key = "picture" + (i + 1);			}		}				attachment.addAll(list);	}}