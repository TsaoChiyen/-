package com.chengxin.Entity;import java.io.Serializable;import java.util.ArrayList;import java.util.List;import android.os.Parcelable;import com.chengxin.net.WeiYuanParameters;import com.chengxin.org.json.JSONArray;import com.chengxin.org.json.JSONException;import com.chengxin.org.json.JSONObject;public class FinancingGoods implements Serializable {		public static final String[] REPAY_MODE	 = {		"等额本金",		"等额本息",		"等比累进",		"等额累进",		"先息后本",		"组合还款",     	"其它方式"	};	public static final String[] PRODUCT_TYPE = {		"抵押贷款",		"信用贷款"	};		public static final String[] SERVICE_RANGE = {		"100公里",		"200公里",		"300公里",		"500公里",		"800公里",		"1000公里",		"1500公里",		"全国范围"	};		public static final String[] MATERIAL_LIST = {		"二代身份证",		"近期个人征信报告",		"收入证明",		"居住证明",		"房产证明",		"车辆行驶证和机动车登记证明",		"企业证明"	};		public static final String[] CLIENT_LIST = {		"企业主",		"个体户",		"上班族",		"无固定职业"	};		/**	 *	 */	private static final long serialVersionUID = 1L;	/**	 *  融资商品表	 */	public int 		id;             //< 商品id	public int 		shopid;         //< 融资商id	public int 		type;        	//< 产品类型	public String 	name;	    	//< 产品名称	public String 	city;			//< 服务城市	public double 	lng;         	//< 用户注册位置的经度	public double 	lat;         	//< 用户注册位置的纬度	public String 	loanAmount;		//< 贷款金额	public String 	loanPeriod;		//< 放款期限	public long 	loanTime;		//< 放款时间		public double	monthly;		//< 月息	public double	monthRepay;		//< 月供	public double	totalPrice;		//< 总金额	public String 	repayMode;		//< 还款方式	public String 	clientType;		//< 客户类型	public String 	material;		//< 申请材料	public String 	other;			//< 其他材料	public String 	loanTerms;		//< 贷款条件	public String 	serviceRange;   //< 服务范围		public double 	bidding;     	//< 竞价排名价格	public double 	adPrice;     	//< 广告位价格	public long 	createtime;  	//< 登记时间	public String 	uid;       		//< 用户uid，用于在线咨询	public String 	headsmall;   	//< 用户头像图标	public String 	phone;	   		//< 用户联系电话，用于电话咨询	public double 	distance;    	//< 用户头像图标	/* 	--	-- 表的结构 `tc_financ_goods`	--	CREATE TABLE IF NOT EXISTS `tc_financ_goods` (	  `id` int(11) NOT NULL,	  `shopid` int(11) NOT NULL,	  `name` varchar(300) CHARACTER SET utf8 NOT NULL COMMENT '产品名称',	  `type` tinyint(4) NOT NULL COMMENT '产品类型',	  `city` varchar(30) CHARACTER SET utf8 NOT NULL,	  `lat` float NOT NULL DEFAULT '0' COMMENT '经度',	  `lng` float DEFAULT '0' COMMENT '维度',	  `loanAmount` varchar(300) CHARACTER SET utf8 DEFAULT NULL COMMENT '贷款金额',	  `loanPeriod` varchar(300) CHARACTER SET utf8 DEFAULT NULL COMMENT '放款期限',	  `loanTime` int(11) NOT NULL DEFAULT '0' COMMENT '放款时间',	  `monthly` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '月息',	  `monthRepay` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '月供',	  `totalPrice` float(10,2) NOT NULL DEFAULT '0.00' COMMENT '总金额',	  `clientType` varchar(300) CHARACTER SET utf8 DEFAULT NULL COMMENT '客户类型',	  `material` varchar(300) CHARACTER SET utf8 DEFAULT NULL COMMENT '申请材料',	  `other` varchar(300) CHARACTER SET utf8 DEFAULT NULL COMMENT '其他材料',	  `loanTerms` varchar(300) CHARACTER SET utf8 DEFAULT NULL COMMENT '贷款条件',	  `serviceRange` varchar(50) CHARACTER SET utf8 DEFAULT NULL COMMENT '服务范围',	  `bidding` int(11) DEFAULT '0' COMMENT '竞价',	  `adprice` int(11) DEFAULT '0' COMMENT '广告',	  `createtime` int(11) NOT NULL	) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;*/	public Login   	 user;         		//< 用户对象	public Financier financier;    		//< 用户的融资商户信息对象    public boolean selected;            //< ui操作，是否选择    public WeiYuanState state;          //< 返回的状态对象    public boolean	noUnit = false;    	public FinancingGoods() {		super();	}	public FinancingGoods(String reqString) {		super();		try {			if(reqString == null || reqString.equals("")){				return;			}			initCompent(new JSONObject(reqString));		} catch (JSONException e) {			e.printStackTrace();		}	}	public FinancingGoods(JSONObject obj){		try {			initCompent(obj);		} catch (JSONException e) {			e.printStackTrace();		}	}		private void initCompent(JSONObject json) throws JSONException{		if(json == null || json.equals("")){			return;		}// data - id		if(!json.isNull("data")){			String dataString = json.getString("data");			if(dataString != null && !dataString.equals("")					&& dataString.startsWith("{")){				init(json.getJSONObject("data"));			}		}else{			init(json);		}		if(!json.isNull("state")){			String stateString = json.getString("state");			if(stateString != null && !stateString.equals("")					&& stateString.startsWith("{")){				state = new WeiYuanState(json.getJSONObject("state"));			}		}	}	private void init(JSONObject json) throws JSONException{		if(json == null || json.equals("")){			return;		}				id          = json.getInt("id");		shopid      = json.getInt("shopid");        name        = json.getString("name");		type	    = json.getInt("type");    	city		= json.getString("city");		lat         = json.getDouble("lat");        lng         = json.getDouble("lng");    	loanAmount	= json.getString("loanAmount");    	loanPeriod	= json.getString("loanPeriod");    	loanTime	= json.getLong("loanTime");    	    	monthly		= json.getDouble("monthly");    	monthRepay	= json.getDouble("monthRepay");    	totalPrice	= json.getDouble("totalPrice");    	repayMode	= json.getString("repayMethod");    	clientType	= json.getString("clientType");        material    = json.getString("material");    	other		= json.getString("other");    	loanTerms	= json.getString("loanTerms");    	    	serviceRange= json.getString("serviceRange");    	bidding     = json.getDouble("bidding");        adPrice     = json.getDouble("adPrice");        createtime  = json.getLong("createtime");        uid         = json.getString("uid");        phone		= json.getString("phone");        headsmall   = json.getString("headsmall");        distance    = json.getDouble("distance");    	selected    = false;	}        public static List<FinancingGoods> constructList(JSONArray array){        try {            List<FinancingGoods> goodsList = new ArrayList<FinancingGoods>();            int size = array.length();                          for (int i = 0; i < size; i++) {                goodsList.add(new FinancingGoods(array.getJSONObject(i)));            }                        return goodsList;        } catch (JSONException jsone) {            jsone.printStackTrace();        }                return null;    }	public WeiYuanParameters getParameters() {        WeiYuanParameters bundle = new WeiYuanParameters();		if (id > 0)			bundle.add("id", String.valueOf(id));		if (shopid > 0)			bundle.add("shopid", String.valueOf(shopid));		if (name != null && !name.equals(""))			bundle.add("name", name);		bundle.add("type", String.valueOf(type));		if (city != null && !city.equals(""))			bundle.add("city", city);		if (lat > 0)			bundle.add("lat", String.valueOf(lat));		if (lng > 0)			bundle.add("lng", String.valueOf(lng));		if (loanAmount != null && !loanAmount.equals(""))			bundle.add("loanAmount", loanAmount);		if (loanPeriod != null && !loanPeriod.equals(""))			bundle.add("loanPeriod", loanPeriod);		bundle.add("loanTime", String.valueOf(loanTime));    			bundle.add("monthly", String.valueOf(monthly));		bundle.add("monthRepay", String.valueOf(monthRepay));		bundle.add("totalPrice", String.valueOf(totalPrice));		if (repayMode != null && !repayMode.equals(""))			bundle.add("repayMethod", repayMode);		if (clientType != null && !clientType.equals(""))			bundle.add("clientType", clientType);    			if (material != null && !material.equals(""))			bundle.add("material", material);				if (other != null && !other.equals(""))			bundle.add("other", other);				if (loanTerms != null && !loanTerms.equals(""))			bundle.add("loanTerms", loanTerms);		if (serviceRange != null && !serviceRange.equals(""))			bundle.add("serviceRange", serviceRange);		bundle.add("bidding", String.valueOf(bidding));		bundle.add("adPrice", String.valueOf(adPrice));        return bundle;	}	public String getServiceRangeString() {		if (noUnit) {			return serviceRange.replace("公里", "");		} else {			return serviceRange;		}	}	public String getLoanTimeString() {		if (noUnit) {			return String.format("%d", loanTime);		} else {			return String.format("%d工作日", loanTime);		}	}		public String getLoanAmountString() {		String strRet = "";		try {			JSONArray array = new JSONArray(loanAmount);						if (array != null) {	            int size = array.length();	            	            if (size == 2) {	            	if (noUnit) {		                strRet = String.format("%d-%d", array.getInt(0), array.getInt(1));	            	} else {		                strRet = String.format("%d-%d万", array.getInt(0), array.getInt(1));	            	}	            }			}		} catch (JSONException e) {			e.printStackTrace();		}		return strRet;	}	public String getLoanPeriodString() {		String strRet = "";		try {			JSONArray array = new JSONArray(loanPeriod);						if (array != null) {	            int size = array.length();	            	            if (size == 2) {	            	if (noUnit) {		                strRet = String.format("%d-%d", array.getInt(0), array.getInt(1));	            	} else {		                strRet = String.format("%d-%d个月", array.getInt(0), array.getInt(1));	            	}	            }			}		} catch (JSONException e) {			e.printStackTrace();		}		return strRet;	}	public static List<String> getStringList(String jsArrayString) {		if (jsArrayString != null &&				!jsArrayString.equals("") &&				!jsArrayString.equals("null") &&				jsArrayString.startsWith("[")) {			try {				JSONArray array = new JSONArray(jsArrayString);								if (array != null) {		            int size = array.length();		            List<String> list = new ArrayList<String>();		            		            for (int i = 0; i < size; i++) {		                list.add(new String(array.getString(i)));		            }		            		            return list;				}			} catch (JSONException e) {				e.printStackTrace();			}		}		return null;	}	public String getTypeString() {		if (type > 0 && type <= 2) {			return PRODUCT_TYPE[type - 1];		}				return null;	}	public String getMonthRepayString() {		if (noUnit) {			return String.format("%.2f", monthRepay);		} else {			return String.format("%.2f元起", monthRepay);		}	}		public String getMonthlyString() {		return String.format("%.2f", monthly);	}	public String getTotalPriceString() {		if (noUnit) {			return String.format("%.2f", totalPrice);		} else {			return String.format("%.2f万", totalPrice);		}	}	public static String getListString(String jsArrayString) {		String strRet = "";				if (jsArrayString != null && !jsArrayString.equals("") && !jsArrayString.equals("null")) {			List<String> list = FinancingGoods.getStringList(jsArrayString);						if (list != null && list.size() > 0) {				int size = list.size();								for (int i = 0; i < size; i++) {					if (strRet.length() > 0) {						strRet += "\n";					}										strRet += String.format("%d.%s", i + 1, list.get(i));										if (i < (size - 1)) {						strRet += ";";					} else {						strRet += "。";					}				}			} else {				strRet = jsArrayString;			}		}		return strRet;	}	public static List<CheckItem> getMaterialCheckList() {		List<CheckItem> mList = new ArrayList<CheckItem>();				if (MATERIAL_LIST.length > 0) {			int id = 1;			for (String item : MATERIAL_LIST) {				CheckItem mItem = new CheckItem(id++, item);				mList.add(mItem);			}		}				return mList;	}	public static List<CheckItem> getClientCheckList() {		List<CheckItem> mList = new ArrayList<CheckItem>();				if (CLIENT_LIST.length > 0) {			int id = 1;			for (String item : CLIENT_LIST) {				CheckItem mItem = new CheckItem(id++, item);				mList.add(mItem);			}		}				return mList;	}	public void setMaterial(String names) {		material = "[" + names + "]";	}	public void setMaterialListChecked(List<CheckItem> list) {		List<String> mlist = FinancingGoods.getStringList(material);		if (mlist != null && mlist.size() > 0) {			if (list != null && list.size() >= mlist.size()) {				for (String id : mlist) {					for (CheckItem item : list) {						if (id.equals(item.name)) {							item.isChecked = true;							break;						}					}				}			}		}	}	public void setClientType(String names) {		clientType = "[" + names + "]";	}	public void setClientListChecked(List<CheckItem> list) {		List<String> mlist = FinancingGoods.getStringList(clientType);		if (mlist != null && mlist.size() > 0) {			if (list != null && list.size() >= mlist.size()) {				for (String id : mlist) {					for (CheckItem item : list) {						if (id.equals(item.name)) {							item.isChecked = true;							break;						}					}				}			}		}	}	public void setAmount(int start, int end) {		loanAmount = String.format("['%d','%d']", start, end);	}	public void setLimit(int start, int end) {		loanPeriod = String.format("['%d','%d']", start, end);	}	public static List<PopItem> getPopList() {		List<PopItem> popList = new ArrayList<PopItem>();		int j = 0;		PopItem pop = new PopItem(j++, "全部贷款");		popList.add(pop);				for (int i = 0; i < PRODUCT_TYPE.length; i++) {			pop = new PopItem(j++, PRODUCT_TYPE[i]);			popList.add(pop);		}		j = 101;				for (int i = 0; i < CLIENT_LIST.length; i++) {			pop = new PopItem(j++, CLIENT_LIST[i]);			popList.add(pop);		}				return popList;	}}