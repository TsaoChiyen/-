package com.chengxin.financial;import java.util.ArrayList;import java.util.List;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.widget.AbsListView;import android.widget.AbsListView.OnScrollListener;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.chengxin.BaseActivity;import com.chengxin.ChatMainActivity;import com.chengxin.R;import com.chengxin.Entity.Bill;import com.chengxin.Entity.BillList;import com.chengxin.Entity.Login;import com.chengxin.Entity.LoginResult;import com.chengxin.Entity.PopItem;import com.chengxin.Entity.WeiYuanState;import com.chengxin.adapter.BillAdapter;import com.chengxin.adapter.BillAdapter.OnBillHandlerClickListener;import com.chengxin.dialog.CPAlert;import com.chengxin.dialog.MMAlert;import com.chengxin.dialog.MMAlert.OnAlertSelectId;import com.chengxin.global.GlobalParam;import com.chengxin.global.WeiYuanCommon;import com.chengxin.map.BMapApiApp;import com.chengxin.net.WeiYuanException;import com.chengxin.widget.PopWindows;import com.chengxin.widget.PopWindows.PopWindowsInterface;import com.chengxin.widget.SearchBillDialog;import com.chengxin.widget.SearchBillDialog.OnSearchBillClickListener;public class MyBillActivity extends BaseActivity implements OnItemClickListener, OnSearchBillClickListener {	protected static final int MSG_BILL_LIST 		= 0x7947;	protected static final int MSG_BILL_ADDED 		= 0x7948;	protected static final int MSG_BILL_EDITED 		= 0x7949;	private static final int REQUEST_ADD_BILL 		= 0x7950;	private static final int REQUEST_EDIT_BILL 		= 0x7951;	private static final int MSG_BILL_DELETED 		= 0x7952;	private static final int MSG_BILL_CLEARED	 	= 0x7953;	private static final int REQUEST_DETAIL_BILL 	= 0x7954;		private LinearLayout mListFooter;	private ListView mListView;	private TextView mFooterText;	private int mPage;	private List < Bill > mList = new ArrayList<Bill >();	private BillAdapter mAdapter;	protected int mPosition = -1;	private List<PopItem> mPopList = new ArrayList<PopItem>();	private PopWindows mPopWindows;//	private RelativeLayout mTitleLayout;	protected boolean mNoMore;	protected LinearLayout mFootView;	private RelativeLayout mAddNew;	private TextView mTextExpire;	private TextView mTextTotal;	private int mNearBills;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = this;		setContentView(R.layout.activity_bill_manager);		initComponent();		getData(GlobalParam.LIST_LOAD_FIRST);	}	private void initComponent() {		setTitleContent(R.drawable.back_btn, true, false, false, R.string.my_bill_title);		mLeftBtn.setOnClickListener(this);		mSearchBtn.setOnClickListener(this);		mAddNew = (RelativeLayout)findViewById(R.id.add_new);		mAddNew.setOnClickListener(this);		//		mTitleLayout = (RelativeLayout) findViewById(R.id.title_layout);//		mTextExpire = (TextView)findViewById(R.id.text_expire);		mTextTotal = (TextView)findViewById(R.id.text_total);		mListFooter = (LinearLayout)LayoutInflater.from(mContext).inflate(R.layout.services_require_footer, null);		mFooterText = (TextView)mListFooter.findViewById(R.id.sumary);		mListView = (ListView)findViewById(R.id.list);		mListView.addFooterView(mListFooter);		mListView.setOnItemClickListener(this);		mListView.setOnScrollListener(new OnScrollListener() {						@Override			public void onScrollStateChanged(AbsListView view, int scrollState) {				switch (scrollState) {				case OnScrollListener.SCROLL_STATE_IDLE://处理加载更多									if(view.getLastVisiblePosition() == (view.getCount()-1) && !mNoMore){						if (WeiYuanCommon.verifyNetwork(mContext)){							mHandler.sendEmptyMessage(GlobalParam.SHOW_LOADINGMORE_INDECATOR);						}else{							Toast.makeText(mContext, mContext.getString(R.string.network_error), Toast.LENGTH_SHORT).show();						}					}					break;				default:					break;				}			}						@Override			public void onScroll(AbsListView view, int firstVisibleItem,					int visibleItemCount, int totalItemCount) {							}		});		mPopList.add(new PopItem(1, "新增信用卡"));		mPopList.add(new PopItem(2, "新增贷款提醒"));				mPopWindows = new PopWindows(mContext, mPopList, mAddNew, new PopWindowsInterface() {			@Override			public void onItemClick(int dataId, int position, View view) {				addBill(dataId);			}		});	}	private void getData(final int loadType) {		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					switch (loadType) {					case GlobalParam.LIST_LOAD_FIRST:					case GlobalParam.LIST_LOAD_REFERSH:						WeiYuanCommon.sendMsg(mBaseHandler, BASE_SHOW_PROGRESS_DIALOG, 								mContext.getResources().getString(R.string.get_dataing));						mPage = 1;						break;					case GlobalParam.LIST_LOAD_MORE:						if(!mNoMore){							mPage += 1;		    			}						break;					}					BillList tempList = WeiYuanCommon.getWeiYuanInfo().getBillList(mPage);					if (loadType == GlobalParam.LIST_LOAD_MORE) {						WeiYuanCommon.sendMsg(mHandler, GlobalParam.HIDE_LOADINGMORE_INDECATOR, tempList);					} else {						mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);						WeiYuanCommon.sendMsg(mHandler, GlobalParam.MSG_LOADINGFIRST_DATA, tempList);					}				} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();					mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);				}			};		}.start();	}	protected Handler mHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);			switch (msg.what) {			case GlobalParam.MSG_GET_CONTACT_DATA:				LoginResult login = (LoginResult)msg.obj;								if(login == null){					Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();					return;				}								if(login.mState.code == 0){					Login user = login.mLogin;										if(user != null){						Intent intent = new Intent(mContext, ChatMainActivity.class);						user.mIsRoom = 100;						intent.putExtra("data", user);						startActivity(intent);					}				} else {					Toast.makeText(mContext, login.mState.errorMsg,Toast.LENGTH_LONG).show();				}				break;						case MSG_BILL_ADDED:				Bill bill = (Bill) msg.obj;								if (bill != null) {					WeiYuanState state = bill.state;					if(state == null){						Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();						return;					}										if (state.errorMsg != null && state.errorMsg.length() > 0)						Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();					if(state.code == 0){						mList.add(0, bill);						showData();					}				}				break;							case MSG_BILL_EDITED:				bill = (Bill) msg.obj;								if (bill != null) {					WeiYuanState state = bill.state;					if(state == null){						Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();						return;					}										if (state.errorMsg != null && state.errorMsg.length() > 0)						Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();					if(state.code == 0 && mPosition >= 0){						mList.set(mPosition, bill);						showData();						mPosition = -1;					}				}				break;							case MSG_BILL_DELETED:			case MSG_BILL_CLEARED:				WeiYuanState state = (WeiYuanState)msg.obj;				if(state == null){					Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();					return;				}								if (state.errorMsg != null && state.errorMsg.length() > 0)					Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();				if(state.code == 0 && mPosition >= 0){					getData(GlobalParam.LIST_LOAD_REFERSH);					mPosition = -1;				}				break;			case GlobalParam.MSG_LOADINGFIRST_DATA:				BillList list = (BillList) msg.obj;								if (list == null) {					return;				}								state = list.mState;				if(state == null){					Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();					return;				}								if (state.errorMsg != null && state.errorMsg.length() > 0)					Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();				if(state.code == 0){					mList.clear();										if (list != null && list.size() > 0) {						if (list.mPageInfo != null) {							mNoMore = list.mPageInfo.hasMore == 0;						}												mList.addAll(list.mBillList);						mNearBills = list.nearToDate;					}										showData();				}				break;							case GlobalParam.SHOW_LOADINGMORE_INDECATOR:				if (mListView.getFooterViewsCount() == 0) {					if (mFootView == null) {						mFootView = (LinearLayout) LayoutInflater.from(mContext)								.inflate(R.layout.hometab_listview_footer, null);					}					mListView.addFooterView(mFootView);						ProgressBar pb = (ProgressBar)mFootView.findViewById(R.id.hometab_addmore_progressbar);					pb.setVisibility(View.VISIBLE);		 							TextView more = (TextView)mFootView.findViewById(R.id.hometab_footer_text);					more.setText(BMapApiApp.getInstance().getResources().getString(R.string.add_more_loading));				}		 		getData(GlobalParam.LIST_LOAD_MORE);				break;			case GlobalParam.HIDE_LOADINGMORE_INDECATOR:				list = (BillList) msg.obj;								if (list == null) {					return;				}								state = list.mState;								if(state == null){					Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();					return;				}								if (state.errorMsg != null && state.errorMsg.length() > 0)					Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();				if(state.code == 0){					if (list != null && list.size() > 0) {						if (list.mPageInfo != null) {							mNoMore = list.mPageInfo.hasMore == 0;						}												mList.addAll(list.mBillList);						mNearBills = list.nearToDate;					}										showData();				}								if (mFootView != null) {					mListView.removeFooterView(mFootView);				}					break;			}		}	};		private OnBillHandlerClickListener mOnBillHandlerClickListener = new OnBillHandlerClickListener() {				@Override		public void onInput(final int position) {			mPosition = position;			CPAlert.showInputAlert(					mContext,					"",					new CPAlert.OnAlertInputOk() {												@Override						public void onOkClick(int whichButton, String[] out) {							if (out != null && out.length > 0) {								Bill bill = mList.get(position);								bill.totalRepay = Double.valueOf(out[0]);								bill.repayMoney = Double.valueOf(out[1]);								updateBill(bill);							}						}					});		}				@Override		public void onDelete(final int position) {			mPosition = position;			Bill bill = mList.get(position);			comfirmDelete(bill);		}				@Override		public void onClearAll(final int position) {			mPosition = position;			Bill bill = mList.get(position);			clearBill(bill, true);		}				@Override		public void onClear(final int position) {			mPosition = position;			Bill bill = mList.get(position);			clearBill(bill, false);		}	};	@Override	public void onClick(View v) {		super.onClick(v);		switch (v.getId()) {		case R.id.left_btn:			this.finish();			break;		case R.id.search_btn:			SearchBillDialog dialog = new SearchBillDialog(mContext, mList);			dialog.setOnSearchBillClickListener(this);			dialog.show();			break;		case R.id.add_new:			mPopWindows.showGroupPopView(mPopList,					Gravity.RIGHT,					R.drawable.no_top_arrow_bg,					R.color.white,					0);						break;		default:			break;		}	}	protected void clearBill(final Bill bill, final boolean withAll) {		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					if (bill.id > 0) {						WeiYuanState state = WeiYuanCommon.getWeiYuanInfo().clearBill(bill.id, withAll);						WeiYuanCommon.sendMsg(mHandler, MSG_BILL_CLEARED, state);					}									} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();			}	protected void comfirmDelete(final Bill bill) {		MMAlert.showAlert(mContext, "是否确定要删除该账单？",				mContext.getResources().getStringArray(R.array.confirm_item), 				null, new OnAlertSelectId() {			@Override			public void onClick(int whichButton) {				if (whichButton == 0) {					//确定删除					deleteBill(bill);				}			}		});	}	protected void showData() {		if (mAdapter == null) {			mAdapter = new BillAdapter(mContext, mList);			mAdapter.setOnBillHandlerClickListener(mOnBillHandlerClickListener);			mListView.setAdapter(mAdapter);		} else {			mAdapter.notifyDataSetChanged();		}				showFooter();	}	private void showFooter() {		if (mList.size() == 0) {			mListFooter.setVisibility(View.GONE);		} else {			mListFooter.setVisibility(View.VISIBLE);			mFooterText.setText(String.format("%d项账单", mList.size()));		}				mTextTotal.setText(String.format("总 %d 份", mList.size()));		mTextExpire.setText(String.format("%d", mNearBills));	}	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);		switch (requestCode) {		case REQUEST_DETAIL_BILL:			if (resultCode == RESULT_OK) {				getData(GlobalParam.LIST_LOAD_REFERSH);			}			break;		case REQUEST_ADD_BILL:			if (resultCode == RESULT_OK) {				if (data != null) {					Bill bill = (Bill) data.getExtras().get("data");										if (bill != null) {						updateBill(bill);					}				}			}			break;		case REQUEST_EDIT_BILL:			if (resultCode == RESULT_OK) {				if (data != null) {					Bill bill = (Bill) data.getExtras().get("data");										if (bill != null) {						updateBill(bill);					}				}			}			break;		default:			break;		}	}	private void updateBill(final Bill bill) {		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					Bill temp = null;					if (bill.id == 0) {						temp = WeiYuanCommon.getWeiYuanInfo().addBill(bill);						WeiYuanCommon.sendMsg(mHandler, MSG_BILL_ADDED, temp);					} else {						temp = WeiYuanCommon.getWeiYuanInfo().editBill(bill);						WeiYuanCommon.sendMsg(mHandler, MSG_BILL_EDITED, temp);					}									} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();			}	@Override	public void onItemClick(AdapterView<?> listView, View convertView, int position, long uid) {		if (position < mList.size()) {			Bill bill = mList.get(position);			mPosition = position;			billDetail(bill);		}	}	private void billDetail(Bill bill) {		Intent intent = new Intent();		intent.setClass(mContext, BillDetailActivity.class);		intent.putExtra("data", bill);		startActivityForResult(intent, REQUEST_DETAIL_BILL);	}	private void addBill(int type) {		Intent intent = new Intent();				if (type == 1) {			intent.setClass(mContext, BillBankActivity.class);		} else {			intent.setClass(mContext, BillInfoActivity.class);		}		startActivityForResult(intent, REQUEST_ADD_BILL);	}//	private void editBill(Bill bill) {//		Intent intent = new Intent();//		//		if (bill.type == 1) {//			intent.setClass(mContext, BillInfoActivity.class);//		} else {//			intent.setClass(mContext, BillBankActivity.class);//		}////		intent.putExtra("data", bill);//		startActivityForResult(intent, REQUEST_EDIT_BILL);//	}//	private void deleteBill(final Bill bill) {		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					if (bill.id > 0) {						WeiYuanState state = WeiYuanCommon.getWeiYuanInfo().deleteBill(bill.id);						WeiYuanCommon.sendMsg(mHandler, MSG_BILL_DELETED, state);					}									} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();			}	@Override	public void onSearchBillClickListener(int sourcePosition) {		Bill bill = mList.get(sourcePosition);		mPosition = sourcePosition;//		editBill(bill);	}}