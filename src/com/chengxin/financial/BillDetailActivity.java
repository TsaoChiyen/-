package com.chengxin.financial;import java.util.Date;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.widget.CompoundButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;import android.widget.CompoundButton.OnCheckedChangeListener;import com.chengxin.BaseActivity;import com.chengxin.ChatMainActivity;import com.chengxin.R;import com.chengxin.Entity.Bill;import com.chengxin.Entity.BillList;import com.chengxin.Entity.Login;import com.chengxin.Entity.LoginResult;import com.chengxin.Entity.WeiYuanState;import com.chengxin.adapter.BillRepayAdapter;import com.chengxin.dialog.CPAlert;import com.chengxin.dialog.MMAlert;import com.chengxin.dialog.MMAlert.OnAlertSelectId;import com.chengxin.global.FeatureFunction;import com.chengxin.global.GlobalParam;import com.chengxin.global.WeiYuanCommon;import com.chengxin.map.BMapApiApp;import com.chengxin.net.WeiYuanException;public class BillDetailActivity extends BaseActivity {	protected static final int MSG_BILL_LIST 		= 0x7947;	protected static final int MSG_BILL_ADDED 		= 0x7948;	protected static final int MSG_BILL_EDITED 		= 0x7949;	private static final int MSG_BILL_DELETED 		= 0x7952;	private static final int MSG_BILL_CLEARED	 	= 0x7953;	private Bill mBill;	private ImageView billLogo;	private TextView billType;	private TextView repayDate;	private TextView billName;	private TextView repayType;	private TextView billPrice;	private TextView billSubPrice;	private LinearLayout billSub;	private TextView billPriceComment;	private LinearLayout btnFlexible;//	private CheckBox checkbox;	private LinearLayout layoutBank;	private TextView limit;	private TextView datePerPhase;	private TextView cardPoints;	private TextView moneyPhase00;	private TextView minForPhase;	private TextView btnMinClear;	private TextView btnStatusClear;	private LinearLayout layoutLoan;	private TextView moneyPerPhase;	private TextView remindPeriod;	private TextView remindDate;	private TextView moneyPhase01;	private TextView btnDelete;	private TextView btnClearAll;	private ListView listView;	private BillRepayAdapter mAdapter;	private TextView btnBankDelete;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = this;		setContentView(R.layout.activity_bill_detail);				initComponent();		getData();	}	private void initComponent() {		if (getIntent().hasExtra("data")) {			mBill = (Bill)getIntent().getExtras().get("data");		}				String title = "信用卡详情";				if (mBill != null) {			if (mBill.type != 1) {				title = "贷款账单详情";			}		}				setTitleContent(R.drawable.back_btn, 0, title);		mLeftBtn.setOnClickListener(this);		billLogo 			= (ImageView)findViewById(R.id.bill_logo);		billType 			= (TextView)findViewById(R.id.bill_type);		billName 			= (TextView)findViewById(R.id.bill_name);		repayDate 			= (TextView)findViewById(R.id.repay_date);		repayType 			= (TextView)findViewById(R.id.repay_type);		billPrice 			= (TextView)findViewById(R.id.bill_price);		billSub				= (LinearLayout)findViewById(R.id.bill_sub);		billSubPrice 		= (TextView)findViewById(R.id.bill_sub_price);		billPriceComment 	= (TextView)findViewById(R.id.bill_price_comment);		btnFlexible 		= (LinearLayout)findViewById(R.id.btn_flexible);//		checkbox 			= (CheckBox)findViewById(R.id.checkbox);				layoutBank 			= (LinearLayout)findViewById(R.id.layout_bank);		limit 				= (TextView)findViewById(R.id.limit);		datePerPhase 		= (TextView)findViewById(R.id.date_per_phase);		cardPoints 			= (TextView)findViewById(R.id.card_points);		moneyPhase00 		= (TextView)findViewById(R.id.money_phase00);		minForPhase 		= (TextView)findViewById(R.id.min_for_phase);		btnBankDelete 		= (TextView)findViewById(R.id.btn_bank_delete);		btnMinClear 		= (TextView)findViewById(R.id.btn_min_clear);		btnStatusClear 		= (TextView)findViewById(R.id.btn_status_clear);				layoutLoan 			= (LinearLayout)findViewById(R.id.layout_loan);		moneyPerPhase 		= (TextView)findViewById(R.id.money_per_phase);		remindPeriod 		= (TextView)findViewById(R.id.remind_period);		remindDate 			= (TextView)findViewById(R.id.remind_date);		moneyPhase01 		= (TextView)findViewById(R.id.money_phase01);		btnDelete 			= (TextView)findViewById(R.id.btn_delete);		btnClearAll 		= (TextView)findViewById(R.id.btn_clear_all);				listView 			= (ListView)findViewById(R.id.listview);	}	private void getData() {		if (mBill.type == 1) { 			// 信用账单			billType.setText(mBill.bankName);			billName.setText(String.valueOf(mBill.credit));		} else if (mBill.type == 2) {	// 贷款账单			if (mBill.remarks != null && !mBill.remarks.equals("null"))				billType.setText(mBill.remarks);						if (mBill.name != null && !mBill.name.equals("null"))				billName.setText(String.valueOf(mBill.name));		}		if (mBill.remain == 0) {			repayDate.setText("今");		} else {			repayDate.setText(String.format("%d", mBill.remain));		}				if (mBill.remain < 0) {			repayType.setText("逾期");		} else {			repayType.setText("到期");		}				if (mBill.remain > 10) {			repayDate.setTextColor(0xf0000000);			repayType.setTextColor(0xf0000000);		} else {			repayDate.setTextColor(0xf0ff0000);			repayType.setTextColor(0xf0ff0000);		}				if (mBill.type == 1) {			if (mBill.totalRepay > 0) {				billPrice.setText(String.format("￥%.2f", mBill.totalRepay));				billPrice.setVisibility(View.VISIBLE);				if (mBill.repayMoney > 0) {					billSubPrice.setText(String.format("￥%.2f", mBill.repayMoney));					billPriceComment.setText("(最低)");					billSubPrice.setVisibility(View.VISIBLE);					billPriceComment.setVisibility(View.VISIBLE);				} else {					billSubPrice.setVisibility(View.GONE);					billPriceComment.setVisibility(View.GONE);				}			} else {				billPrice.setVisibility(View.GONE);				billSubPrice.setVisibility(View.GONE);				billPriceComment.setText("本期未获取到账单");			}		} else {			billPrice.setText(String.format("￥%.2f", mBill.repayMoney));			billSub.setVisibility(View.GONE);		}		btnFlexible.setVisibility(View.GONE);		if (mBill.type == 1) {			layoutBank.setVisibility(View.VISIBLE);			layoutLoan.setVisibility(View.GONE);			limit.setText(String.format("￥%.2f",mBill.quota));			if (mBill.repayDate > 31) {				Date date = new Date(mBill.repayDate * 1000);				datePerPhase.setText(FeatureFunction.getDateString(mContext, date, 100));			} else {				datePerPhase.setText("每月" + mBill.repayDate + "日");			}						cardPoints.setText(String.valueOf(mBill.integral));			if (mBill.totalRepay > 0) {				moneyPhase00.setText(String.format("￥%.2f", mBill.totalRepay));				moneyPhase00.setTextColor(0xf0ff0000);								if (mBill.repayMoney > 0) {					minForPhase.setText(String.format("￥%.2f(最低)", mBill.repayMoney));					minForPhase.setTextColor(0xf0ff0000);					minForPhase.setVisibility(View.VISIBLE);				} else {					minForPhase.setVisibility(View.GONE);				}				btnMinClear.setVisibility(View.VISIBLE);				btnMinClear.setEnabled(mBill.repayStatus == 0);				btnStatusClear.setText("已还清");			} else {				moneyPhase00.setText("未获取到账单");				moneyPhase00.setTextColor(0xff808080);				minForPhase.setText("你可以自己录入账单");				minForPhase.setTextColor(0xff808080);								btnMinClear.setVisibility(View.GONE);				btnStatusClear.setText("录入");			}			btnBankDelete.setOnClickListener(this);			btnMinClear.setOnClickListener(this);			btnStatusClear.setOnClickListener(this);		} else {			layoutLoan.setVisibility(View.VISIBLE);			layoutBank.setVisibility(View.GONE);			moneyPerPhase.setText(String.format("￥%.2f", mBill.repayMoney));			remindPeriod.setText(mBill.getRemindCircleString());			remindDate.setText("提前" + mBill.leadDay + "天");			moneyPhase01.setText(String.format("￥%.2f", mBill.repayMoney));			btnDelete.setOnClickListener(this);			btnClearAll.setOnClickListener(this);		}				showData();	}	private void showData() {		if (mAdapter == null) {			mAdapter = new BillRepayAdapter(mContext, mBill.repayList);			listView.setAdapter(mAdapter);		} else {			mAdapter.notifyDataSetChanged();;		}	}	@Override	public void onClick(View v) {		super.onClick(v);		switch (v.getId()) {		case R.id.left_btn:			goBack();			break;					case R.id.btn_min_clear:			clearBill(false);			break;		case R.id.btn_status_clear:			if (mBill.totalRepay > 0) {				clearBill(true);			} else {				CPAlert.showInputAlert(						mContext,						"",						new CPAlert.OnAlertInputOk() {														@Override							public void onOkClick(int whichButton, String[] out) {								if (out != null && out.length > 0) {									mBill.totalRepay = Double.valueOf(out[0]);									mBill.repayMoney = Double.valueOf(out[1]);									updateBill();								}							}						});			}			break;		case R.id.btn_bank_delete:		case R.id.btn_delete:			comfirmDelete();			break;		case R.id.btn_clear_all:			clearBill(true);			break;		}	}	private void goBack() {		setResult(RESULT_OK);		this.finish();	}	protected void comfirmDelete() {		MMAlert.showAlert(mContext, "是否确定要删除该账单？",				mContext.getResources().getStringArray(R.array.confirm_item), 				null, new OnAlertSelectId() {			@Override			public void onClick(int whichButton) {				if (whichButton == 0) {					//确定删除					deleteBill();				}			}		});	}	private void deleteBill() {		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					if (mBill.id > 0) {						WeiYuanState state = WeiYuanCommon.getWeiYuanInfo().deleteBill(mBill.id);						WeiYuanCommon.sendMsg(mHandler, MSG_BILL_DELETED, state);					}									} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();			}	protected void clearBill(final boolean withAll) {		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					if (mBill.id > 0) {						WeiYuanState state = WeiYuanCommon.getWeiYuanInfo().clearBill(mBill.id, withAll);						WeiYuanCommon.sendMsg(mHandler, MSG_BILL_CLEARED, state);					}				} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();			}	private void updateBill() {		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					Bill temp = WeiYuanCommon.getWeiYuanInfo().editBill(mBill);					WeiYuanCommon.sendMsg(mHandler, MSG_BILL_EDITED, temp);				} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();				}			};		}.start();			}	protected Handler mHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);			switch (msg.what) {			case MSG_BILL_EDITED:				Bill bill = (Bill) msg.obj;								if (bill != null) {					WeiYuanState state = bill.state;					if(state == null){						Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();						return;					}										if (state.errorMsg != null && state.errorMsg.length() > 0)						Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();					if(state.code == 0) {						getData();					}				}				break;							case MSG_BILL_DELETED:			case MSG_BILL_CLEARED:				WeiYuanState state = (WeiYuanState)msg.obj;				if(state == null){					Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();					return;				}								if (state.errorMsg != null && state.errorMsg.length() > 0)					Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();				if(state.code == 0) {					goBack();				}				break;			}		}	};}