package com.chengxin.financial;import java.io.File;import android.content.ContentResolver;import android.content.ContentUris;import android.content.Context;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.provider.DocumentsContract;import android.provider.MediaStore;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import android.widget.Toast;import com.chengxin.BaseActivity;import com.chengxin.R;import com.chengxin.Entity.Financier;import com.chengxin.dialog.MMAlert;import com.chengxin.dialog.MMAlert.OnAlertSelectId;import com.chengxin.global.FeatureFunction;import com.chengxin.global.GlobalParam;import com.chengxin.global.ImageLoader;public class FinancierInfoActivity extends BaseActivity {	private static final String TEMP_WORK_FILE_NAME = "work_pic.jpg";	private static final String TEMP_IDCARD_FILE_NAME = "idcard_pic.jpg";	private static final String TEMP_BUSI_FILE_NAME = "busi_pic.jpg";	private static final int IMAGE_WORK_SELECTED = 0x8001;	private static final int IMAGE_IDCARD_SELECTED = 0x8002;	private static final int IMAGE_BUSI_SELECTED = 0x8003;	private Financier mFinancier = null;	private EditText mEditCompany;	private EditText mEditAddress;	private EditText mEditCity;	private ImageView mImageShopPaper;	private ImageView mImageIdCard;	private ImageView mImageCertification;	private LinearLayout mLayoutCharge;	private TextView mBtnCharge;	private EditText mEditCharge;	private TextView mTextPromptDetail;	private Button mBtnSubmit;	private ImageLoader mImageLoader = new ImageLoader();	private int mCurrentImage;	private ImageView currImageView = null;	private Bitmap currBitmap = null;	private Bitmap 	mWorkBitmap, mIdCardBitmap, mBusiBitmap;	private String mWorkImageFilePath,	mIdCardImageFilePath,	mBusiImageFilePath;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = this;		setContentView(R.layout.activity_financier_info);		if (getIntent().hasExtra("data")) {			mFinancier = (Financier)getIntent().getExtras().get("data");		}				if (mFinancier == null) {			mFinancier = new Financier();		}				mWorkImageFilePath = mIdCardImageFilePath = mBusiImageFilePath = null;		initComponent();		getData();	}	private void initComponent() {		setTitleContent(R.drawable.back_btn, 0, R.string.financier_info_title);		mLeftBtn.setOnClickListener(this);				mEditCompany = (EditText)findViewById(R.id.edit_company);		mEditAddress = (EditText)findViewById(R.id.edit_address);		mEditCity = (EditText)findViewById(R.id.edit_city);				mImageShopPaper = (ImageView)findViewById(R.id.image_shop_paper);		mImageIdCard = (ImageView)findViewById(R.id.image_id_card);		mImageCertification = (ImageView)findViewById(R.id.image_certification);		mImageShopPaper.setOnClickListener(this);		mImageIdCard.setOnClickListener(this);		mImageCertification.setOnClickListener(this);				mLayoutCharge = (LinearLayout)findViewById(R.id.layout_charge);		mBtnCharge = (TextView)findViewById(R.id.btn_charge);		mEditCharge = (EditText)findViewById(R.id.edit_charge);				mTextPromptDetail = (TextView)findViewById(R.id.text_prompt_detail);				mBtnSubmit = (Button)findViewById(R.id.btn_submit);				mBtnCharge.setOnClickListener(this);		mBtnSubmit.setOnClickListener(this);				if (mFinancier == null || mFinancier.id == 0) {			mBtnSubmit.setText("申请入驻");			mLayoutCharge.setVisibility(View.GONE);		}	}	private void getData() {		if (mFinancier !=null && mFinancier.id > 0) {			if (mFinancier.company != null && !mFinancier.company.equals("") && !mFinancier.company.equals("null")) {				mEditCompany.setText(mFinancier.company);			}			if (mFinancier.address != null && !mFinancier.address.equals("") && !mFinancier.address.equals("null")) {				mEditAddress.setText(mFinancier.address);			}			if (mFinancier.city != null && !mFinancier.city.equals("") && !mFinancier.city.equals("null")) {				mEditCity.setText(mFinancier.city);			}						if (mFinancier.workPaper != null && !mFinancier.workPaper.equals("") && !mFinancier.workPaper.equals("null")) {				mImageLoader.getBitmap(mContext, mImageShopPaper, null, mFinancier.workPaper, 0, false, false, false);			}			if (mFinancier.idcard != null && !mFinancier.idcard.equals("") && !mFinancier.idcard.equals("null")) {				mImageLoader.getBitmap(mContext, mImageIdCard, null, mFinancier.idcard, 0, false, false, false);			}			if (mFinancier.certificate != null && !mFinancier.certificate.equals("") && !mFinancier.certificate.equals("null")) {				mImageLoader.getBitmap(mContext, mImageCertification, null, mFinancier.certificate, 0, false, false, false);			}						mTextPromptDetail.setText("10芯币＝1人民币");		}	}	@Override	public void onClick(View v) {		super.onClick(v);				switch (v.getId()) {		case R.id.left_btn:			this.finish();			break;		case R.id.image_shop_paper:			mCurrentImage = IMAGE_WORK_SELECTED;			selectImg();			break;		case R.id.image_id_card:			mCurrentImage = IMAGE_IDCARD_SELECTED;			selectImg();			break;		case R.id.image_certification:			mCurrentImage = IMAGE_BUSI_SELECTED;			selectImg();			break;		case R.id.btn_charge:			Toast.makeText(mContext, "测试期间，暂不提供充值服务！", Toast.LENGTH_LONG).show();;			break;		case R.id.btn_submit:			submit();			break;		default:			break;		}	}	private void selectImg() {		MMAlert.showAlert(mContext, "", mContext.getResources()				.getStringArray(R.array.camer_item), null, new OnAlertSelectId() {			@Override			public void onClick(int whichButton) {				Log.e("whichButton", "whichButton: "+whichButton);				switch (whichButton) {				case 0:					getImageFromGallery();					break;				case 1:					getImageFromCamera();					break;				default:					break;				}			}		});	}	/*	 * 拍一张	 */	private void getImageFromCamera() {		Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);		if(FeatureFunction.newFolder(Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY)){			File out = null;			switch (mCurrentImage) {			case IMAGE_WORK_SELECTED:				out = new File(Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY, TEMP_WORK_FILE_NAME);				break;			case IMAGE_IDCARD_SELECTED:				out = new File(Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY, TEMP_IDCARD_FILE_NAME);				break;			case IMAGE_BUSI_SELECTED:				out = new File(Environment.getExternalStorageDirectory() + FeatureFunction.PUB_TEMP_DIRECTORY, TEMP_BUSI_FILE_NAME);				break;			}						if (out != null) {				Uri uri = Uri.fromFile(out);				intent.putExtra(MediaStore.EXTRA_OUTPUT, uri);				startActivityForResult(intent, GlobalParam.REQUEST_GET_IMAGE_BY_CAMERA);			}		}	}	/*	 * 从相册中选一张	 */	private void getImageFromGallery() {		Intent intent = new Intent(Intent.ACTION_GET_CONTENT, null);		intent.setType("image/*");		startActivityForResult(intent, GlobalParam.REQUEST_GET_URI);	}	/*	 * 处理选择的图片	 */	private void doChoose(final boolean isGallery, final Intent data) {        if(isGallery || data != null){            originalImage(data);        }else {			String tempUrl = null;        	        	if (mCurrentImage == IMAGE_WORK_SELECTED) {    			tempUrl = TEMP_WORK_FILE_NAME;        	} else if (mCurrentImage == IMAGE_IDCARD_SELECTED) {    			tempUrl = TEMP_WORK_FILE_NAME;        	} else if (mCurrentImage == IMAGE_BUSI_SELECTED) {    			tempUrl = TEMP_BUSI_FILE_NAME;        	}        	        	if (tempUrl != null) {    			String path = Environment.getExternalStorageDirectory()    					+ FeatureFunction.PUB_TEMP_DIRECTORY + tempUrl;    			String extension = path.substring(path.indexOf("."), path.length());    			if (FeatureFunction.isPic(extension)) {    				startPhotoZoom(Uri.fromFile(new File(path)));    			}        	}        }    }	/**     * 根据图片路径进入裁剪页面     *     * @param data     */    private void originalImage(Intent data) {        Uri uri = data.getData();        if (!TextUtils.isEmpty(uri.getAuthority())) {            ContentResolver resolver = this.getContentResolver();            String[] projection = { MediaStore.Images.Media.DATA };            String localImagePath = "";            if (Build.VERSION.SDK_INT > 18) {                String lastPathSegment = uri.getLastPathSegment();                if (!lastPathSegment.matches("\\d+"))                    lastPathSegment = lastPathSegment.split(":")[1];                String selection = MediaStore.Images.Media._ID + "=?";                String[] selectionArgs = { lastPathSegment };                Cursor cursor = resolver.query(                        MediaStore.Images.Media.EXTERNAL_CONTENT_URI, projection,                        selection, selectionArgs, null);                int columnIndex = cursor.getColumnIndex(projection[0]);                if (cursor.moveToFirst())                    localImagePath = cursor.getString(columnIndex);                cursor.close();            } else {                Cursor cursor = resolver.query(uri, projection, null, null,                        null);                int columnIndex = cursor                        .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);                cursor.moveToFirst();                localImagePath = cursor.getString(columnIndex);                cursor.close();            }            String extension = localImagePath.substring(                    localImagePath.lastIndexOf("."), localImagePath.length());            if (FeatureFunction.isPic(extension)) {                startPhotoZoom(uri);            }        } else {            String path = uri.getPath();            String extension = path.substring(path.lastIndexOf("."),                    path.length());            if (FeatureFunction.isPic(extension)) {                startPhotoZoom(Uri.fromFile(new File(path)));            }        }    }    	/**	 * 裁剪图片	 */	 /**     * 调用系统裁剪功能     *     * @param uri     *            文件URI     */    public void startPhotoZoom(Uri uri) {        Intent intent = new Intent("com.android.camera.action.CROP");        if (android.os.Build.VERSION.SDK_INT > 18) {            String url=getPath(mContext, uri);            intent.setDataAndType(Uri.fromFile(new File(url)), "image/*");        }else{            intent.setDataAndType(uri, "image/*");        }        //intent.setDataAndType(uri, "image/*");        // 下面这个crop=true是设置在开启的Intent中设置显示的VIEW可裁剪        intent.putExtra("crop", "true");        // aspectX aspectY 是宽高的比例        intent.putExtra("aspectX", 1);        intent.putExtra("aspectY", 1);        // outputX outputY 是裁剪图片宽高        intent.putExtra("outputX", 320);        intent.putExtra("outputY", 320);        intent.putExtra("return-data", true);        startActivityForResult(intent, GlobalParam.REQUEST_GET_BITMAP);    }        public static String getPath(final Context context, final Uri uri) {        final boolean isKitKat = Build.VERSION.SDK_INT > 18;        // DocumentProvider        if (isKitKat && DocumentsContract.isDocumentUri(context, uri)) {            // ExternalStorageProvider            if (isExternalStorageDocument(uri)) {                final String docId = DocumentsContract.getDocumentId(uri);                final String[] split = docId.split(":");                final String type = split[0];                if ("primary".equalsIgnoreCase(type)) {                    return Environment.getExternalStorageDirectory() + "/" + split[1];                }            }            // DownloadsProvider            else if (isDownloadsDocument(uri)) {                final String id = DocumentsContract.getDocumentId(uri);                final Uri contentUri = ContentUris.withAppendedId(                        Uri.parse("content://downloads/public_downloads"), Long.valueOf(id));                return getDataColumn(context, contentUri, null, null);            }            // MediaProvider            else if (isMediaDocument(uri)) {                final String docId = DocumentsContract.getDocumentId(uri);                final String[] split = docId.split(":");                final String type = split[0];                Uri contentUri = null;                if ("image".equals(type)) {                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;                } else if ("video".equals(type)) {                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;                } else if ("audio".equals(type)) {                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;                }                final String selection = "_id=?";                final String[] selectionArgs = new String[] {                        split[1]                };                return getDataColumn(context, contentUri, selection, selectionArgs);            }        }        // MediaStore (and general)        else if ("content".equalsIgnoreCase(uri.getScheme())) {            // Return the remote address            if (isGooglePhotosUri(uri))                return uri.getLastPathSegment();            return getDataColumn(context, uri, null, null);        }        // File        else if ("file".equalsIgnoreCase(uri.getScheme())) {            return uri.getPath();        }        return null;    }	public static String getDataColumn(Context context, Uri uri,			String selection, String[] selectionArgs) {		Cursor cursor = null;		final String column = "_data";		final String[] projection = { column };		try {			cursor = context.getContentResolver().query(uri, projection,					selection, selectionArgs, null);			if (cursor != null && cursor.moveToFirst()) {				final int index = cursor.getColumnIndexOrThrow(column);				return cursor.getString(index);			}		} finally {			if (cursor != null)				cursor.close();		}		return null;	}    /**     * @param uri The Uri to check.     * @return Whether the Uri authority is ExternalStorageProvider.     */    public static boolean isExternalStorageDocument(Uri uri) {        return "com.android.externalstorage.documents".equals(uri.getAuthority());    }    /**     * @param uri The Uri to check.     * @return Whether the Uri authority is DownloadsProvider.     */    public static boolean isDownloadsDocument(Uri uri) {        return "com.android.providers.downloads.documents".equals(uri.getAuthority());    }    /**     * @param uri The Uri to check.     * @return Whether the Uri authority is MediaProvider.     */    public static boolean isMediaDocument(Uri uri) {        return "com.android.providers.media.documents".equals(uri.getAuthority());    }    /**     * @param uri The Uri to check.     * @return Whether the Uri authority is Google Photos.     */    public static boolean isGooglePhotosUri(Uri uri) {        return "com.google.android.apps.photos.content".equals(uri.getAuthority());    }	private void submit() {		if (!checkValue()) {			return;		}				Intent intent = new Intent();		intent.putExtra("data", mFinancier);		setResult(RESULT_OK, intent);		this.finish();	}	private boolean checkValue() {		mFinancier.company = mEditCompany.getText().toString();		mFinancier.address = mEditAddress.getText().toString();		mFinancier.city = mEditCity.getText().toString();		mFinancier.workPaper = mWorkImageFilePath;		mFinancier.idcard = mIdCardImageFilePath;		mFinancier.certificate = mBusiImageFilePath;						String number = mEditCharge.getText().toString();				if (number == null || number.equals("")) {		}		String hint = null;				if (mFinancier.company == null || mFinancier.company.equals("")) {			hint = "请输入公司名称";		} else if (mFinancier.address == null || mFinancier.address.equals("")) {			hint = "请输入公司地址";		} else if (mFinancier.city == null || mFinancier.city.equals("")) {			hint = "请输入服务城市";		}				if (hint != null && hint.length() > 0) {			Toast.makeText(mContext, hint, Toast.LENGTH_LONG).show();			return false;		}				return true;	}	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);		switch (requestCode) {		case GlobalParam.REQUEST_GET_URI:			if (resultCode == RESULT_OK) {				doChoose(true, data);			}			break;		case GlobalParam.REQUEST_GET_IMAGE_BY_CAMERA:			if (resultCode == RESULT_OK) {				doChoose(false, data);			}			break;		case GlobalParam.REQUEST_GET_BITMAP:			if (resultCode == RESULT_OK) {				Bundle extras = data.getExtras();				if (extras != null) {					File file = null;					String tempFileName = null;										switch (mCurrentImage) {					case IMAGE_WORK_SELECTED:						currImageView = mImageShopPaper;						currBitmap = mWorkBitmap;						tempFileName = TEMP_WORK_FILE_NAME;						break;					case IMAGE_IDCARD_SELECTED:						currImageView = mImageIdCard;						currBitmap = mIdCardBitmap;						tempFileName = TEMP_IDCARD_FILE_NAME;						break;					case IMAGE_BUSI_SELECTED:						currImageView = mImageCertification;						currBitmap = mBusiBitmap;						tempFileName = TEMP_BUSI_FILE_NAME;						break;					}					if (tempFileName != null) {						file = new File(								Environment.getExternalStorageDirectory()								+ FeatureFunction.PUB_TEMP_DIRECTORY								+ tempFileName);					}					if (currImageView != null) {						currImageView.setImageBitmap(null);						if (currBitmap != null && !currBitmap.isRecycled()) {							currBitmap.recycle();							currBitmap = null;						}						currBitmap = extras.getParcelable("data");						currImageView.setImageBitmap(currBitmap);						if (file != null && file.exists()) {							file.delete();							file = null;						}						switch (mCurrentImage) {						case IMAGE_WORK_SELECTED:							mWorkBitmap = currBitmap;							mWorkImageFilePath = FeatureFunction									.saveTempBitmap(currBitmap, "temp_work.jpg");							break;						case IMAGE_IDCARD_SELECTED:							mIdCardBitmap = currBitmap;							mIdCardImageFilePath = FeatureFunction									.saveTempBitmap(currBitmap, "temp_idcard.jpg");							break;						case IMAGE_BUSI_SELECTED:							mBusiBitmap = currBitmap;							mBusiImageFilePath = FeatureFunction									.saveTempBitmap(currBitmap, "temp_busi.jpg");							break;						}					}				}			}			break;		}	}}