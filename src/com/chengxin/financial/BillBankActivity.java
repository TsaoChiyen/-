package com.chengxin.financial;import java.util.Calendar;import java.util.Date;import android.app.AlertDialog;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.DatePicker.OnDateChangedListener;import android.widget.DatePicker;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.TimePicker;import android.widget.Toast;import com.chengxin.BaseActivity;import com.chengxin.R;import com.chengxin.Entity.Bill;import com.chengxin.global.FeatureFunction;public class BillBankActivity extends BaseActivity implements OnCheckedChangeListener {	private Bill mBill = null;		private LinearLayout mLabelLayout;	private RelativeLayout mProtocolLayout;		private EditText mEditCard;	private EditText mEditName;	private EditText mEditDate;	private EditText mEditEmail;	private EditText mEditPassword;	private EditText mEditLogin;	private EditText mEditServer;		private CheckBox mChkAgree;	private TextView mBtnProtocol;	private long mRepaymentDate;	private boolean mIsChecked = false;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = this;		setContentView(R.layout.bank_bill_activity);				initComponent();		getData();	}	private void initComponent() {		if (getIntent().hasExtra("data")) {			mBill = (Bill)getIntent().getExtras().get("data");		}		setTitleContent(R.drawable.back_btn, R.drawable.ok, R.string.bill_bank_title);		mLeftBtn.setOnClickListener(this);		mRightBtn.setOnClickListener(this);		mLabelLayout = (LinearLayout)findViewById(R.id.layout_label);		mProtocolLayout = (RelativeLayout)findViewById(R.id.layout_protocol);		mEditCard = (EditText)findViewById(R.id.edt_card);		mEditName = (EditText)findViewById(R.id.edt_name);		mEditDate = (EditText)findViewById(R.id.edt_date);		mEditEmail = (EditText)findViewById(R.id.edt_email);		mEditPassword = (EditText)findViewById(R.id.edt_password);		mEditLogin = (EditText)findViewById(R.id.edt_login);		mEditServer = (EditText)findViewById(R.id.edt_server);		mChkAgree = (CheckBox)findViewById(R.id.chk_agree);		mBtnProtocol = (TextView)findViewById(R.id.btn_protocol);		mChkAgree.setOnCheckedChangeListener(this);		mBtnProtocol.setOnClickListener(this);				mEditDate.setOnClickListener(this);		if (mBill != null && mBill.id > 0) {			mLabelLayout.setVisibility(View.VISIBLE);						if (mBill.email != null && !mBill.email.equals("") && !mBill.email.equals("null")) {				mProtocolLayout.setVisibility(View.GONE);			}		} else {			mBill = new Bill(2);		}	}	private void getData() {		if (mBill != null && mBill.id > 0) {			mEditCard.setText(mBill.card);			mEditName.setText(mBill.bank);			mRepaymentDate = mBill.repayment;			Date date = new Date(mRepaymentDate * 1000);			mEditDate.setText(FeatureFunction.getDateString(mContext, date, 2));		}	}	@Override	public void onClick(View v) {		super.onClick(v);				switch (v.getId()) {		case R.id.left_btn:			this.finish();			break;		case R.id.right_btn:			updateData();			break;		case R.id.edt_date:			showDateTimeDialog();			break;		case R.id.btn_protocol:			break;		default:			break;		}	}		@Override	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {		mIsChecked = isChecked;	}	private void updateData() {		if (mBill != null) {			mBill.card = mEditCard.getText().toString();			mBill.bank = mEditName.getText().toString();			Date date = FeatureFunction.strToDate(mEditDate.getText().toString());			mRepaymentDate = date.getTime() / 1000;			mBill.repayment = mRepaymentDate;			Date now = new Date();						mBill.email = mEditEmail.getText().toString();			mBill.emailpwd = mEditPassword.getText().toString();			mBill.emaillogin = mEditLogin.getText().toString();			mBill.emailsvr = mEditServer.getText().toString();						String hint = null;						if (mBill.card == null || mBill.card.equals("")) {				hint = "请输入信用卡卡号的4位尾号";			} else if (mBill.bank == null || mBill.bank.equals("")) {				hint = "请选择还款银行";			} else if (date.getTime() <= now.getTime()) {				hint = "请指定正确的还款最后期限";			}						if (mBill.email != null && !mBill.email.equals("")) {				if (mIsChecked == false) {					hint = "必须同意邮件抓取授权协议后才能设置信用卡账单邮箱";				}			}						if (hint != null && hint.length() > 0) {				Toast.makeText(mContext, hint, Toast.LENGTH_LONG).show();;			} else {				submit();			}		}	}	private void submit() {		Intent intent = new Intent();		intent.putExtra("data", mBill);		setResult(RESULT_OK, intent);		this.finish();	}		private void showDateTimeDialog () {		View view = LayoutInflater.from(mContext).inflate(R.layout.time_dialog, null);		final DatePicker datePicker = (DatePicker) view.findViewById(R.id.datePicker);		final TimePicker timePicker = (TimePicker) view.findViewById(R.id.timePicker);		timePicker.setVisibility(View.GONE);		Calendar c = Calendar.getInstance();				if (mBill.repayment > 0) {			Date date = new Date(mBill.repayment * 1000);			c.setTime(date);		}		int year = c.get(Calendar.YEAR);  		int month = c.get(Calendar.MONTH);  		int day = c.get(Calendar.DAY_OF_MONTH); 				datePicker.init(year, month, day, new OnDateChangedListener() {						@Override			public void onDateChanged(DatePicker view, int year, int monthOfYear,					int dayOfMonth) {			}		});				AlertDialog.Builder builder = new AlertDialog.Builder(mContext);		AlertDialog dialog = builder.create();		dialog.setButton(DialogInterface.BUTTON_POSITIVE, "确定", new DialogInterface.OnClickListener() {			@Override			public void onClick(DialogInterface dialog, int which) {				dialog.dismiss();				datePicker.clearFocus();				timePicker.clearFocus();				int mYear = datePicker.getYear();				int mMonth = datePicker.getMonth() + 1;				int mDay = datePicker.getDayOfMonth();				Date date = FeatureFunction.convertToDate(mYear, mMonth, mDay);				String strDate = FeatureFunction.getDateString(mContext, date, 2);				mEditDate.setText(strDate);				mRepaymentDate = date.getTime() / 1000;			}		});				dialog.setButton(DialogInterface.BUTTON_NEGATIVE, "取消", new DialogInterface.OnClickListener() {						@Override			public void onClick(DialogInterface dialog, int which) {				dialog.dismiss();			}		});				String title = "选择还款期限";		dialog.setTitle(title);		dialog.setView(view, 0, FeatureFunction.dip2px(mContext, 5), 0, FeatureFunction.dip2px(mContext, 5));				dialog.show();	}}