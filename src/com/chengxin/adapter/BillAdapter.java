package com.chengxin.adapter;import java.util.Date;import java.util.List;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.View.OnClickListener;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.CheckBox;import android.widget.CompoundButton;import android.widget.CompoundButton.OnCheckedChangeListener;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.chengxin.R;import com.chengxin.Entity.Bill;import com.chengxin.global.FeatureFunction;public class BillAdapter extends BaseAdapter {	public interface OnBillHandlerClickListener {		public void onClear(int position);		public void onClearAll(int position);		public void onInput(int position);		public void onDelete(int position);	}	private List<Bill> mList;	private Context mContext;	private LayoutInflater mInflater;	private OnBillHandlerClickListener mListener;		public void setOnBillHandlerClickListener(OnBillHandlerClickListener l) {		mListener = l;	}	public BillAdapter(Context context, List<Bill> list) {		super();		this.mList = list;		this.mContext = context;		mInflater = LayoutInflater.from(context); 	}	@Override	public int getCount() {		return mList.size();	}	@Override	public Object getItem(int position) {		return mList.get(position);	}	@Override	public long getItemId(int position) {		return Integer.valueOf(mList.get(position).id).longValue();	}	@Override	public View getView(final int position, View convertView, ViewGroup parent) {		final ViewHolder holder;		if (convertView == null || ((ViewHolder) convertView.getTag()).position != position) {			convertView = mInflater.inflate(R.layout.shop_bill_item, null);			holder = new ViewHolder();			holder.position = position;						holder.billLogo 			= (ImageView)convertView.findViewById(R.id.bill_logo);			holder.billType 			= (TextView)convertView.findViewById(R.id.bill_type);			holder.billName 			= (TextView)convertView.findViewById(R.id.bill_name);			holder.repayDate 			= (TextView)convertView.findViewById(R.id.repay_date);			holder.repayType 			= (TextView)convertView.findViewById(R.id.repay_type);			holder.billPrice 			= (TextView)convertView.findViewById(R.id.bill_price);			holder.billSub				= (LinearLayout)convertView.findViewById(R.id.bill_sub);			holder.billSubPrice 		= (TextView)convertView.findViewById(R.id.bill_sub_price);			holder.billPriceComment 	= (TextView)convertView.findViewById(R.id.bill_price_comment);			holder.btnFlexible 			= (LinearLayout)convertView.findViewById(R.id.btn_flexible);			holder.checkbox 			= (CheckBox)convertView.findViewById(R.id.checkbox);						holder.layoutBank 			= (LinearLayout)convertView.findViewById(R.id.layout_bank);			holder.limit 				= (TextView)convertView.findViewById(R.id.limit);			holder.datePerPhase 		= (TextView)convertView.findViewById(R.id.date_per_phase);			holder.cardPoints 			= (TextView)convertView.findViewById(R.id.card_points);			holder.moneyPhase00 		= (TextView)convertView.findViewById(R.id.money_phase00);			holder.minForPhase 			= (TextView)convertView.findViewById(R.id.min_for_phase);			holder.btnBankDelete		= (TextView)convertView.findViewById(R.id.btn_bank_delete);			holder.btnMinClear 			= (TextView)convertView.findViewById(R.id.btn_min_clear);			holder.btnStatusClear 		= (TextView)convertView.findViewById(R.id.btn_status_clear);						holder.layoutLoan 			= (LinearLayout)convertView.findViewById(R.id.layout_loan);			holder.moneyPerPhase 		= (TextView)convertView.findViewById(R.id.money_per_phase);			holder.remindPeriod 		= (TextView)convertView.findViewById(R.id.remind_period);			holder.remindDate 			= (TextView)convertView.findViewById(R.id.remind_date);			holder.moneyPhase01 		= (TextView)convertView.findViewById(R.id.money_phase01);			holder.btnDelete 			= (TextView)convertView.findViewById(R.id.btn_delete);			holder.btnClearAll 			= (TextView)convertView.findViewById(R.id.btn_clear_all);						convertView.setTag(holder);		}else{			holder = (ViewHolder) convertView.getTag();		}		final Bill item = mList.get(position);				if (item.type == 1) { 			// 信用账单			holder.billType.setText(item.bankName);			holder.billName.setText(String.valueOf(item.credit));		} else if (item.type == 2) {	// 贷款账单			if (item.remarks != null && !item.remarks.equals("null"))				holder.billType.setText(item.remarks);						if (item.name != null && !item.name.equals("null"))				holder.billName.setText(String.valueOf(item.name));		}		if (item.remain == 0) {			holder.repayDate.setText("今");		} else {			holder.repayDate.setText(String.format("%d", item.remain));		}				if (item.remain < 0) {			holder.repayType.setText("逾期");		} else {			holder.repayType.setText("到期");		}				if (item.remain > 10) {			holder.repayDate.setTextColor(0xf0000000);			holder.repayType.setTextColor(0xf0000000);		} else {			holder.repayDate.setTextColor(0xf0ff0000);			holder.repayType.setTextColor(0xf0ff0000);		}				if (item.type == 1) {			if (item.totalRepay > 0) {				holder.billPrice.setText(String.format("￥%.2f", item.totalRepay));				holder.billPrice.setVisibility(View.VISIBLE);				if (item.repayMoney > 0) {					holder.billSubPrice.setText(String.format("￥%.2f", item.repayMoney));					holder.billPriceComment.setText("(最低)");					holder.billSubPrice.setVisibility(View.VISIBLE);					holder.billPriceComment.setVisibility(View.VISIBLE);				} else {					holder.billSubPrice.setVisibility(View.GONE);					holder.billPriceComment.setVisibility(View.GONE);				}			} else {				holder.billPrice.setVisibility(View.GONE);				holder.billSubPrice.setVisibility(View.GONE);				holder.billPriceComment.setText("本期未获取到账单");			}		} else {			holder.billPrice.setText(String.format("￥%.2f", item.repayMoney));			holder.billSub.setVisibility(View.GONE);		}		holder.checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {						@Override			public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {				if (isChecked) {					if (item.type == 1) {						holder.layoutBank.setVisibility(View.VISIBLE);					} else {						holder.layoutLoan.setVisibility(View.VISIBLE);					}				} else {					if (item.type == 1) {						holder.layoutBank.setVisibility(View.GONE);					} else {						holder.layoutLoan.setVisibility(View.GONE);					}				}			}		});		if (item.type == 1) {			holder.limit.setText(String.format("￥%.2f",item.quota));						if (item.repayDate > 31) {				Date date = new Date(item.repayDate * 1000);				holder.datePerPhase.setText(FeatureFunction.getDateString(mContext, date, 100));			} else {				holder.datePerPhase.setText("每月" + item.repayDate + "日");			}						holder.cardPoints.setText(String.valueOf(item.integral));			if (item.totalRepay > 0) {				holder.moneyPhase00.setText(String.format("￥%.2f", item.totalRepay));				holder.moneyPhase00.setTextColor(0xf0ff0000);								if (item.repayMoney > 0) {					holder.minForPhase.setText(String.format("￥%.2f(最低)", item.repayMoney));					holder.minForPhase.setTextColor(0xf0ff0000);					holder.minForPhase.setVisibility(View.VISIBLE);				} else {					holder.minForPhase.setVisibility(View.GONE);				}				holder.btnMinClear.setVisibility(View.VISIBLE);								if (item.repayStatus == 1) {					holder.btnMinClear.setEnabled(false);				} else {					holder.btnMinClear.setEnabled(true);				}								holder.btnStatusClear.setText("已还清");			} else {				holder.moneyPhase00.setText("未获取到账单");				holder.moneyPhase00.setTextColor(0xff808080);				holder.minForPhase.setText("你可以自己录入账单");				holder.minForPhase.setTextColor(0xff808080);								holder.btnMinClear.setVisibility(View.GONE);				holder.btnStatusClear.setText("录入");			}			holder.btnBankDelete.setOnClickListener(new OnClickListener() {								@Override				public void onClick(View v) {					if (mListener != null) {						mListener.onDelete(position);						holder.layoutBank.setVisibility(View.GONE);					}				}			});			holder.btnMinClear.setOnClickListener(new OnClickListener() {								@Override				public void onClick(View v) {					if (mListener != null) {						mListener.onClear(position);						holder.layoutBank.setVisibility(View.GONE);					}				}			});						holder.btnStatusClear.setOnClickListener(new OnClickListener() {								@Override				public void onClick(View v) {					if (mListener != null) {						if (item.totalRepay > 0) {							mListener.onClearAll(position);						} else {							mListener.onInput(position);						}						holder.layoutBank.setVisibility(View.GONE);					}				}			});		} else {			holder.moneyPerPhase.setText(String.format("￥%.2f", item.repayMoney));			holder.remindPeriod.setText(item.getRemindCircleString());			holder.remindDate.setText("提前" + item.leadDay + "天");			holder.moneyPhase01.setText(String.format("￥%.2f", item.repayMoney));			holder.btnDelete.setOnClickListener(new OnClickListener() {								@Override				public void onClick(View v) {					if (mListener != null) {						mListener.onDelete(position);						holder.layoutLoan.setVisibility(View.GONE);					}				}			});			holder.btnClearAll.setOnClickListener(new OnClickListener() {								@Override				public void onClick(View v) {					if (mListener != null) {						mListener.onClearAll(position);						holder.layoutLoan.setVisibility(View.GONE);					}				}			});		}				return convertView;	}		public static class ViewHolder {		public ImageView 	billLogo;		public TextView 	billType;		public TextView 	billName;		public TextView 	repayDate;		public TextView 	repayType;		public TextView 	billPrice;		public LinearLayout billSub;		public TextView 	billSubPrice;		public TextView 	billPriceComment;		public LinearLayout btnFlexible;		public CheckBox 	checkbox;				public LinearLayout layoutBank;		public TextView 	limit;		public TextView 	datePerPhase;		public TextView 	cardPoints;		public TextView 	moneyPhase00;		public TextView 	minForPhase;		public TextView 	btnBankDelete;		public TextView 	btnMinClear;		public TextView 	btnStatusClear;		public LinearLayout layoutLoan;		public TextView 	moneyPerPhase;		public TextView 	remindPeriod;		public TextView 	remindDate;		public TextView 	moneyPhase01;		public TextView 	btnDelete;		public TextView 	btnClearAll;		public int position;				@Override		public int hashCode() {			return billLogo.hashCode() + billType.hashCode()					+ billName.hashCode();		}	}}