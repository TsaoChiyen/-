package com.chengxin.profile.shopping;import java.util.ArrayList;import java.util.List;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.util.Log;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.Button;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.TextView;import android.widget.Toast;import android.widget.AbsListView.OnScrollListener;import android.widget.AdapterView.OnItemClickListener;import android.widget.ListView;import com.chengxin.R;import com.chengxin.BaseActivity;import com.chengxin.Entity.Goods;import com.chengxin.Entity.MerchantMenu;import com.chengxin.Entity.PopItem;import com.chengxin.Entity.ShopGoodsList;import com.chengxin.Entity.WeiYuanState;import com.chengxin.adapter.ShopShelfAdapter;import com.chengxin.global.GlobalParam;import com.chengxin.global.GlobleType;import com.chengxin.global.WeiYuanCommon;import com.chengxin.map.BMapApiApp;import com.chengxin.net.WeiYuanException;import com.chengxin.widget.PopWindows;import com.chengxin.widget.PopWindows.PopWindowsInterface;public class ShopShelfActivity extends BaseActivity {	protected static final int REQUEST_SHELF_INOF = 1120;	private ListView listView;	private List < Goods > mGoodsList = new ArrayList<Goods>();	private int mStatus;	private LinearLayout mToolBarLayout;	private Button mCategoryButton;	private List<PopItem> mCategoryMenuList;	private PopWindows mPopWindows;	private int mCategoryid;	private ShopShelfAdapter mAdapter;	private Button mUploadButton;	private Button mDownloadButton;	private Button mStatusButton;	private List<PopItem> mStatusMenuList;	private PopWindows mPopStatusWindows;	protected int mPage;	protected boolean mNoMore;	private int mShopType = 0;	@Override	protected void onCreate(Bundle savedInstanceState) {		super.onCreate(savedInstanceState);		mContext = this;		setContentView(R.layout.shop_shelf_activity);		if (getIntent().hasExtra("type")) {			mShopType   = getIntent().getIntExtra("type", GlobleType.SHOPPING_MANAGER);		}				initComponent();        if (mGoodsList != null && mGoodsList.size() > 0) {        	mGoodsList.clear();        }                getData(GlobalParam.LIST_LOAD_FIRST);	}	private void getData(final int loadType) {		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					switch (loadType) {					case GlobalParam.LIST_LOAD_FIRST:					case GlobalParam.LIST_LOAD_REFERSH:						WeiYuanCommon.sendMsg(mBaseHandler, BASE_SHOW_PROGRESS_DIALOG, 								mContext.getResources().getString(R.string.get_dataing));						mPage = 1;						break;					case GlobalParam.LIST_LOAD_MORE:						if(!mNoMore){							mPage += 1;		    			}						break;					}										ShopGoodsList tempList = WeiYuanCommon.getWeiYuanInfo().getShopGoosList(							mShopType,							mPage,							mCategoryid, 							mStatus);					if (loadType == GlobalParam.LIST_LOAD_MORE) {						WeiYuanCommon.sendMsg(mHandler, GlobalParam.HIDE_LOADINGMORE_INDECATOR, tempList);					} else {						mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);						WeiYuanCommon.sendMsg(mHandler, GlobalParam.MSG_LOADINGFIRST_DATA, tempList);					}				} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();					mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);				}			};		}.start();	}	private void initComponent() {		setTitleContent(R.drawable.back_btn, 0, R.string.shop_shelf_activity_title);        mLeftBtn.setOnClickListener(this);                mToolBarLayout = (LinearLayout) findViewById(R.id.tool_bar_layout);        mCategoryButton = (Button)findViewById(R.id.category_btn);        mCategoryButton.setOnClickListener(this);        mStatusButton = (Button)findViewById(R.id.status_btn);        mStatusButton.setOnClickListener(this);        mUploadButton = (Button)findViewById(R.id.upon_shelf_btn);        mUploadButton.setOnClickListener(this);        mDownloadButton = (Button)findViewById(R.id.down_shelf_btn);        mDownloadButton.setOnClickListener(this);        mCategoryMenuList = (List<PopItem>) MerchantMenu.getPopMenuList();        mPopWindows = new PopWindows(mContext, mCategoryMenuList, mToolBarLayout, new PopWindowsInterface() {			@Override			public void onItemClick(int dataId, int position, View view) {				mCategoryid = dataId;				Log.i("DataID", String.valueOf(dataId));				mCategoryButton.setText(mCategoryMenuList.get(position).option);		        getData(GlobalParam.LIST_LOAD_REFERSH);			}        });        mStatusMenuList = new ArrayList<PopItem>();        mStatusMenuList.add(new PopItem(0, "所有状态"));        mStatusMenuList.add(new PopItem(1, "未上架"));        mStatusMenuList.add(new PopItem(2, "已上架"));        mPopStatusWindows = new PopWindows(mContext, mStatusMenuList, mToolBarLayout, new PopWindowsInterface() {			@Override			public void onItemClick(int dataId, int position, View view) {				mStatus = dataId;				Log.i("DataID", String.valueOf(dataId));				mStatusButton.setText(mStatusMenuList.get(position).option);				getData(GlobalParam.LIST_LOAD_REFERSH);			}        });        listView = (ListView)findViewById(R.id.shelf_list);		listView.setOnItemClickListener(mItemClickListener);		listView.setOnScrollListener(new OnScrollListener() {						@Override			public void onScrollStateChanged(AbsListView view, int scrollState) {				switch (scrollState) {				case OnScrollListener.SCROLL_STATE_IDLE://处理加载更多									if(view.getLastVisiblePosition() == (view.getCount()-1) && !mNoMore){						if (WeiYuanCommon.verifyNetwork(mContext)){							mHandler.sendEmptyMessage(GlobalParam.SHOW_LOADINGMORE_INDECATOR);						}else{							Toast.makeText(mContext, mContext.getString(R.string.network_error), Toast.LENGTH_SHORT).show();						}					}					break;				default:					break;				}			}						@Override			public void onScroll(AbsListView view, int firstVisibleItem,					int visibleItemCount, int totalItemCount) {							}		});	}		public void showData() {		if (mAdapter == null) {			mAdapter = new ShopShelfAdapter(mContext, mGoodsList);			listView.setAdapter(mAdapter);		} else {			mAdapter.notifyDataSetChanged();		}	}	@Override	public void onClick(View v) {		super.onClick(v);		switch (v.getId()) {		case R.id.left_btn:			this.finish();			break;					case R.id.category_btn:			mPopWindows.showGroupPopView(mCategoryMenuList,					Gravity.LEFT,					R.drawable.no_top_arrow_bg,					R.color.white,					0);			break;					case R.id.status_btn:			mPopStatusWindows.showGroupPopView(mStatusMenuList,					Gravity.CENTER,					R.drawable.no_top_arrow_bg,					R.color.white,					0);			break;					case R.id.upon_shelf_btn:			changeShelfGoods(2);			break;					case R.id.down_shelf_btn:			changeShelfGoods(1);			break;		default:			break;		}	}	private List<Goods> getSelectedGoods(int status) {		List<Goods> list = new ArrayList<Goods>();		if (mGoodsList.size() > 0) {			for (int i = 0; i < mGoodsList.size(); i ++) {				Goods goods = mGoodsList.get(i);								if (goods.selected) {					goods.selected = false;										if (goods.price > 0 && goods.number > 0) {						goods.status = status;						list.add(goods);					} else {						if (status == 2) {							list.clear();							break;						} else {							goods.status = status;							list.add(goods);						}					}				}			}		}				return list;	}	private void changeShelfGoods(final int status) {		final List<Goods> selectedList = getSelectedGoods(status);				if (selectedList == null || selectedList.size() == 0) {						if (status == 2) {				Toast.makeText(mContext, "请保证要上架的商品都有价格和库存量后再上架", Toast.LENGTH_LONG).show();			}			return;		}		if (!WeiYuanCommon.getNetWorkState()) {			mBaseHandler.sendEmptyMessage(BASE_MSG_NETWORK_ERROR);			return;		}		new Thread(){			public void run() {				try {					WeiYuanCommon.sendMsg(mBaseHandler, BASE_SHOW_PROGRESS_DIALOG, 							mContext.getResources().getString(R.string.get_dataing));										WeiYuanState state = WeiYuanCommon.getWeiYuanInfo().shelfGoods(							mShopType,							status,							selectedList);					mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);					WeiYuanCommon.sendMsg(mHandler, GlobalParam.MSG_CHECK_STATE, state);				} catch (WeiYuanException e) {					e.printStackTrace();					WeiYuanCommon.sendMsg(mBaseHandler, BASE_MSG_TIMEOUT_ERROR, 							mContext.getResources().getString(e.getStatusCode()));				} catch (Exception e) {					e.printStackTrace();					mBaseHandler.sendEmptyMessage(BASE_HIDE_PROGRESS_DIALOG);				}			};		}.start();	}	@Override	protected void onActivityResult(int requestCode, int resultCode, Intent data) {		super.onActivityResult(requestCode, resultCode, data);				switch (requestCode) {		case REQUEST_SHELF_INOF:			if (resultCode == RESULT_OK) {				int pos = data.getIntExtra("position", -1);				Goods item = (Goods) data.getExtras().get("data");								if (item != null && pos >= 0) {					mGoodsList.set(pos, item);					mAdapter.notifyDataSetChanged();				}			}						break;		default:			break;		}			}	private OnItemClickListener mItemClickListener = new OnItemClickListener() {		@Override		public void onItemClick(AdapterView<?> sender, View convertView, int position, long id) {			Goods item = mGoodsList.get(position);			Intent intent = new Intent();			intent.setClass(mContext, ShopShelfInfoActivity.class);			intent.putExtra("position", position);			intent.putExtra("data", item);			intent.putExtra("type", mShopType);			startActivityForResult(intent, REQUEST_SHELF_INOF);		}	};	protected LinearLayout mFootView;	private Handler mHandler = new Handler() {		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);						switch (msg.what) {			case GlobalParam.MSG_LOADINGFIRST_DATA:				ShopGoodsList list = (ShopGoodsList)msg.obj;								if (list == null) {					return;				}								WeiYuanState state = list.mState;				if(state == null){					Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();					return;				}								if (state.errorMsg != null && state.errorMsg.length() > 0)					Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();				if(state.code == 0){					mGoodsList.clear();										if (list != null && list.size() > 0) {						if (list.mPageInfo != null) {							mNoMore = list.mPageInfo.hasMore == 0;						}												mGoodsList.addAll(list.mList);					}										showData();				}				break;							case GlobalParam.SHOW_LOADINGMORE_INDECATOR:				if (mFootView == null) {					mFootView = (LinearLayout) LayoutInflater.from(mContext)							.inflate(R.layout.hometab_listview_footer, null);				}							if (listView.getFooterViewsCount() == 0) {					listView.addFooterView(mFootView);					}								ProgressBar pb = (ProgressBar)mFootView.findViewById(R.id.hometab_addmore_progressbar);				pb.setVisibility(View.VISIBLE);		 						TextView more = (TextView)mFootView.findViewById(R.id.hometab_footer_text);				more.setText(BMapApiApp.getInstance().getResources().getString(R.string.add_more_loading));		 		getData(GlobalParam.LIST_LOAD_MORE);				break;			case GlobalParam.HIDE_LOADINGMORE_INDECATOR:				list = (ShopGoodsList)msg.obj;								if (list == null) {					return;				}								state = list.mState;								if(state == null){					Toast.makeText(mContext, R.string.commit_data_error,Toast.LENGTH_LONG).show();					return;				}								if (state.errorMsg != null && state.errorMsg.length() > 0)					Toast.makeText(mContext, state.errorMsg,Toast.LENGTH_LONG).show();				if(state.code == 0){					if (list != null && list.size() > 0) {						if (list.mPageInfo != null) {							mNoMore = list.mPageInfo.hasMore == 0;						}												mGoodsList.addAll(list.mList);					}										showData();				}								if (listView.getFooterViewsCount() != 0) {					listView.removeFooterView(mFootView);				}					if (mAdapter != null){					mAdapter.notifyDataSetChanged();				}								break;			}		}			};}